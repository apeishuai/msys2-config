<p>本篇博客主要讲怎么写 Emacs 插件来改善我们的工作环境， 进一步提升工作效率， 其中的内容是我给公司同事内部培训的教材， 会不定期更新。</p>

<p>整篇风格偏向实战， 不求完备， 只求内容简约可快速学习， 不能替代 Elisp 语言本身的系统性学习。</p>

<h3 id="emacs-和-vi-的优势">Emacs 和 Vi 的优势</h3>
<p>研发人员的开发效率主要由三个部分组成： 知识积累、 思路清晰和心流专注， 而 Emacs 和 Vi 这种全键盘设计导向的编程工具可以最大程度的减少工具对人的打扰。 一个人的心流状态持续越久， 相应的研发能力提升就越快。</p>

<h3 id="emacs-本质">Emacs 本质</h3>
<p>Emacs 的本质是 Elisp 解释器 + 热替换的机制， 在运行中改进 Emacs 自己的状态和函数定义， 而不用像 IDE 那样有严格的 “开发、 编译、 测试和发布” 流程， 给插件作者最大自由的创作空间。 这种自由自在的环境才是 Emacser 高产和创造力的根源, 因为 Elisp 开发插件的过程中 “充满乐趣”。</p>

<h3 id="加载起始点">加载起始点</h3>
<p>一般来说， Emacs 的配置都是从 ~/.emacs 开始， 也可以把部分配置放到 ~/.emacs.d/early-init.el 中加速 Emacs 启动速度。 今天为了方便讲解， 所有代码都是针对 ~/.emacs 这个路径来讲的。</p>

<h3 id="emacs-怎么找到插件">Emacs 怎么找到插件？</h3>
<p>Emacs 的插件都从 <code class="language-plaintext highlighter-rouge">load-path</code> 这个列表中去查找加载（可以通过 M-x describe-variable RET load-path 来查看完整列表)， 当我们从网上下载了第三方插件， 不管插件存储在什么地方， 需要通过添加插件路径到 <code class="language-plaintext highlighter-rouge">load-path</code> 去加载：</p>

<div class="language-elisp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="nv">add-to-list</span> <span class="ss">'load-path</span> <span class="nv">plugin-path</span> <span class="no">t</span><span class="p">)</span>
</code></pre></div></div>

<p>其中 <code class="language-plaintext highlighter-rouge">plugin-path</code> 是插件存放的完整路径， 需要注意的是 <code class="language-plaintext highlighter-rouge">add-to-list</code> 最后一个参数设置为 t (t 在 Elisp 语言中表示 true， false 用 nil 表示), 意味着 <code class="language-plaintext highlighter-rouge">plugin-path</code> 要加到 <code class="language-plaintext highlighter-rouge">load-path</code> 列表的末尾而不是列表的开头。 原因是 Emacs 会按照 <code class="language-plaintext highlighter-rouge">load-path</code> 的路径顺序依次加载， 如果加载到列表开头， 就有可能会导致复杂插件的子模块加载时找不到父模块， 最终导致 Emacs 启动失败。</p>

<p>随着用 Emacs 越来越熟练， 我们写很多 add-to-list 这样的重复配置就显得很傻， 下面是我自己手写的一版递归扫描目录下所有插件的函数 <code class="language-plaintext highlighter-rouge">add-subdirs-to-load-path</code> ， 和 Emacs 内置的 <code class="language-plaintext highlighter-rouge">normal-top-level-add-subdirs-to-load-path</code> 不同的是， <code class="language-plaintext highlighter-rouge">add-subdirs-to-load-path</code> 能有效的排除 <code class="language-plaintext highlighter-rouge">dist</code> <code class="language-plaintext highlighter-rouge">node_modules</code> 等这些超级大的目录, 提升 Emacs 启动时扫描插件文件的速度。</p>

<div class="language-elisp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="nb">defun</span> <span class="nv">add-subdirs-to-load-path</span> <span class="p">(</span><span class="nv">search-dir</span><span class="p">)</span>
  <span class="p">(</span><span class="nv">interactive</span><span class="p">)</span>
  <span class="p">(</span><span class="k">let*</span> <span class="p">((</span><span class="nv">dir</span> <span class="p">(</span><span class="nv">file-name-as-directory</span> <span class="nv">search-dir</span><span class="p">)))</span>
    <span class="p">(</span><span class="nb">dolist</span> <span class="p">(</span><span class="nv">subdir</span>
             <span class="c1">;; 过滤出不必要的目录，提升 Emacs 启动速度</span>
             <span class="p">(</span><span class="nv">cl-remove-if</span>
              <span class="nf">#'</span><span class="p">(</span><span class="k">lambda</span> <span class="p">(</span><span class="nv">subdir</span><span class="p">)</span>
                  <span class="p">(</span><span class="nb">or</span>
                   <span class="c1">;; 不是目录的文件都移除</span>
                   <span class="p">(</span><span class="nb">not</span> <span class="p">(</span><span class="nv">file-directory-p</span> <span class="p">(</span><span class="nv">concat</span> <span class="nv">dir</span> <span class="nv">subdir</span><span class="p">)))</span>
                   <span class="c1">;; 父目录、 语言相关和版本控制目录都移除</span>
                   <span class="p">(</span><span class="nb">member</span> <span class="nv">subdir</span> <span class="o">'</span><span class="p">(</span><span class="s">"."</span> <span class="s">".."</span> 
                                    <span class="s">"dist"</span> <span class="s">"node_modules"</span> <span class="s">"__pycache__"</span> 
                                    <span class="s">"RCS"</span> <span class="s">"CVS"</span> <span class="s">"rcs"</span> <span class="s">"cvs"</span> <span class="s">".git"</span> <span class="s">".github"</span><span class="p">))))</span> 
              <span class="p">(</span><span class="nv">directory-files</span> <span class="nv">dir</span><span class="p">)))</span>
      <span class="p">(</span><span class="k">let</span> <span class="p">((</span><span class="nv">subdir-path</span> <span class="p">(</span><span class="nv">concat</span> <span class="nv">dir</span> <span class="p">(</span><span class="nv">file-name-as-directory</span> <span class="nv">subdir</span><span class="p">))))</span>
        <span class="c1">;; 目录下有 .el .so .dll 文件的路径才添加到 `load-path' 中，提升 Emacs 启动速度</span>
        <span class="p">(</span><span class="nb">when</span> <span class="p">(</span><span class="nv">cl-some</span> <span class="nf">#'</span><span class="p">(</span><span class="k">lambda</span> <span class="p">(</span><span class="nv">subdir-file</span><span class="p">)</span>
                           <span class="p">(</span><span class="nb">and</span> <span class="p">(</span><span class="nv">file-regular-p</span> <span class="p">(</span><span class="nv">concat</span> <span class="nv">subdir-path</span> <span class="nv">subdir-file</span><span class="p">))</span>
                                <span class="c1">;; .so .dll 文件指非 Elisp 语言编写的 Emacs 动态库</span>
                                <span class="p">(</span><span class="nb">member</span> <span class="p">(</span><span class="nv">file-name-extension</span> <span class="nv">subdir-file</span><span class="p">)</span> <span class="o">'</span><span class="p">(</span><span class="s">"el"</span> <span class="s">"so"</span> <span class="s">"dll"</span><span class="p">))))</span>
                       <span class="p">(</span><span class="nv">directory-files</span> <span class="nv">subdir-path</span><span class="p">))</span>

          <span class="c1">;; 注意：`add-to-list' 函数的第三个参数必须为 t ，表示加到列表末尾</span>
          <span class="c1">;; 这样 Emacs 会从父目录到子目录的顺序搜索 Elisp 插件，顺序反过来会导致 Emacs 无法正常启动</span>
          <span class="p">(</span><span class="nv">add-to-list</span> <span class="ss">'load-path</span> <span class="nv">subdir-path</span> <span class="no">t</span><span class="p">))</span>

        <span class="c1">;; 继续递归搜索子目录</span>
        <span class="p">(</span><span class="nv">add-subdirs-to-load-path</span> <span class="nv">subdir-path</span><span class="p">)))))</span>

<span class="p">(</span><span class="nv">add-subdirs-to-load-path</span> <span class="s">"/usr/share/emacs/lazycat"</span><span class="p">)</span>
</code></pre></div></div>

<h3 id="加载插件">加载插件</h3>
<p>前面说的 <code class="language-plaintext highlighter-rouge">load-path</code> 只是把插件的目录告诉 Emacs， 但是 Emacs 默认并不加载这些插件， 当需要加载插件 <code class="language-plaintext highlighter-rouge">my-plugin</code> 时， 代码也很简单， 用 <code class="language-plaintext highlighter-rouge">(require 'my-plugin)</code> 即可， Elisp 中的 <code class="language-plaintext highlighter-rouge">require</code> 相当于 Python 中 <code class="language-plaintext highlighter-rouge">import</code> 的意思。</p>

<h3 id="elisp-hello-world">Elisp Hello World</h3>
<p>接下来， 我们用一个 Hello World 程序来展示 Emacs 插件的开发。</p>

<p>首先， 创建一个 my-plugin.el 的文件， 内容如下：</p>

<div class="language-elisp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="nb">defun</span> <span class="nv">my-first-elisp-code</span> <span class="p">()</span>
  <span class="p">(</span><span class="nv">interactive</span><span class="p">)</span>
  <span class="p">(</span><span class="nv">message</span> <span class="s">"Hello elisp world!"</span><span class="p">))</span>
  
<span class="p">(</span><span class="nb">provide</span> <span class="ss">'my-plugin</span><span class="p">)</span>
</code></pre></div></div>

<p>接着用 M-x load-file 这个操作去加载文件 my-plugin.el 的内容， 加载完成后， 再执行 M-x my-first-elisp-code 命令， 就可以在 minibuffer 中看到 “Hello elisp world!” 的输出。 (M-x 在 Emacs 是 Alt + x 的意思， 按 Alt + x 会聚焦到 Emacs 底部去筛选将要被调用的命令)。</p>

<ul>
  <li>上面代码其实是通过 <code class="language-plaintext highlighter-rouge">defun</code> 关键字定义一个叫 <code class="language-plaintext highlighter-rouge">my-first-elisp-code</code> 的函数， 函数名的括号表示函数参数列表</li>
  <li>参数列表后跟了一个 <code class="language-plaintext highlighter-rouge">(interactive)</code> 的代码， 这段代码的意思是标识这个函数是可以通过 M-x 这个操作界面 ‘交互式’ 的调用的， 如果我们去掉 <code class="language-plaintext highlighter-rouge">(interactive)</code> 这一行， <code class="language-plaintext highlighter-rouge">my-first-elisp-code</code> 函数只能在 <code class="language-plaintext highlighter-rouge">eval-expression</code> 中执行， 不能被用户手动调用执行</li>
  <li>整个函数的核心就是 <code class="language-plaintext highlighter-rouge">(message "Hello elisp world!")</code>， 这句代码的意思很明显， 在 minibuffer 打印字符串</li>
  <li>最后通过 <code class="language-plaintext highlighter-rouge">provide</code> 关键字提供 <code class="language-plaintext highlighter-rouge">my-plugin</code> 这个插件， 注意 <code class="language-plaintext highlighter-rouge">my-plugin</code> 之前有一个单引号， 千万不要忘记了</li>
</ul>

<p>到目前为止， 你已经完成了 Emacs 插件的入门学习， 总结起来， 就三步：</p>
<ol>
  <li>创建 *.el 插件文件, 在里面写上自定义函数并通过 <code class="language-plaintext highlighter-rouge">provide</code> 关键字提供文件同名的插件模块</li>
  <li>通过 <code class="language-plaintext highlighter-rouge">add-to-list</code> 的方式把插件文件的路径加入 <code class="language-plaintext highlighter-rouge">load-path</code> 中</li>
  <li>通过 <code class="language-plaintext highlighter-rouge">require</code> 加载插件模块， 使用 M-x 的方式调用插件中的 interactive 函数</li>
</ol>

<p>Emacs 默认的配置让人看着很古老， 但是 Emacs 最方便的是它的插件开发方式非常简单， 就是上面的三板斧， 不需要熟悉 Elisp 就能马上 DIY 编写自己的插件。</p>

<h3 id="emacs-的一些社区约定">Emacs 的一些社区约定</h3>
<p>在展开讲插件的编程技巧之前， 先和大家分享一下 Emacs 的社区约定， 也可以叫‘潜规则’， 哈哈哈哈。</p>

<ol>
  <li>没有命名空间： Emacs 本身就是一个解释器， Elisp 这门编程语言没有像 Python、 Golang 那样的 namespace 概念， 所有插件定义的变量和函数对于 Emacs 来说都是全局可访问和修改的， 这种没有 namespace 概念的约定坏处很多， 比如， 函数名又臭又长， 一般都要用 plugin-prefix-function-name 的形式去定义。 好处呢， 就是拥有最大的自由， 不管是否是你写的代码， 你都可以任意自定义变量值和函数定义</li>
  <li>文件名即插件名： provide 后面的名字一般来说和插件的文件名是保持一致的， 一般不会出现 a.el 文件代码是 <code class="language-plaintext highlighter-rouge">(provide 'b)</code> 的形式， 虽然理论上可行， 但是一般不这样做</li>
  <li>单文件走天下： 配置就是代码， 代码就是配置， 在 Elisp 领域， 没有 OOP 语言那样严格的数据、类、实例等概念， 基本上就是变量、函数、各种 hook 和 advice 混在一起的超级面条， 外人看着很多 Emacs 插件都是几千行单文件走天下, 觉得很不可思议， 但是这基本上是大多数 Emacs 插件的习惯（巨型插件除外）， 好处是把插件的单文件下载下来就可以加载， 非常方便省心</li>
</ol>

<h3 id="emacs-插件的类型">Emacs 插件的类型</h3>
<p>Emacs 插件一般有几种开发方式：</p>

<ol>
  <li>命令行输出： 针对外部命令行工具的输出进行正则过滤后， 再利用 Emacs 的 <code class="language-plaintext highlighter-rouge">text property</code> 或者 <code class="language-plaintext highlighter-rouge">overlay</code> 技术对匹配的正则表达式进行过滤、高亮等操作， 比如 <a href="https://github.com/manateelazycat/color-rg">color-rg</a></li>
  <li>Pure Elisp： 基于 Emacs 现有的基础设施， 开发针对 Emacs Buffer 的插件， 只用 Elisp 实现， 一般这类插件都是 ‘光标移动艺术’ 的典范， 比如 Emacs 内置的基本编辑库 <a href="https://github.com/emacs-mirror/emacs/blob/master/lisp/simple.el">simple.el</a></li>
  <li>外部 RPC： 通过外部 RPC 的方式， 结合其他语言和生态库来扩展 Emacs， 一般这种插件一半是 Elisp 代码， 一半是外部语言， 比如 <a href="https://github.com/emacs-eaf/emacs-application-framework">EAF</a>、 <a href="https://github.com/manateelazycat/lsp-bridge">lsp-bridge</a>、 <a href="https://github.com/ginqi7/deno-bridge-jieba">deno-bridge-jieba</a>、 <a href="https://github.com/ginqi7/dictionary-overlay">dictionary-overlay</a>等， 这类插件有外部语言生态库的加持， 比单一的 Elisp 来写插件， 性能、功能和开发效率都更加强大， 但是整体设计更为复杂， 不适合初学者学习， 所以以后有时间再单独论述</li>
</ol>

<h3 id="通过外部命令行工具扩展-emacs">通过外部命令行工具扩展 Emacs</h3>
<p>这节主要讲怎么通过命令行输出来开发插件。</p>

<p>先上最简单的例子:</p>

<div class="language-elisp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="nb">defun</span> <span class="nv">my-first-elisp-code</span> <span class="p">()</span>
  <span class="p">(</span><span class="nv">interactive</span><span class="p">)</span>
  <span class="p">(</span><span class="nv">message</span> <span class="s">"%s"</span> <span class="p">(</span><span class="nv">shell-command-to-string</span> <span class="s">"ls"</span><span class="p">)))</span>
</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">message</code> 后面跟了 <code class="language-plaintext highlighter-rouge">%s</code> 的意思是， 针对第三个参数的输出进行字符串格式转换操作</li>
  <li><code class="language-plaintext highlighter-rouge">shell-command-to-string</code> 这个函数的意思是， 把命令的输出转换成字符串</li>
</ul>

<p>M-x load-file 重新加载文件以载入新的函数定义， 再执行 <code class="language-plaintext highlighter-rouge">my-first-elisp-code</code> 命令时， 就可以在 minibuffer 中看到当前目录的文件列表输出， 完整的输出可以通过 C-x b 输入 <code class="language-plaintext highlighter-rouge">*Messages*</code> 看到， Emacs 中所有 minibuffer 的输出内容都会记录一份到 <code class="language-plaintext highlighter-rouge">*Messages*</code> buffer 中， 像上面这种 <code class="language-plaintext highlighter-rouge">ls</code> 命令输出多行内容时， 切换到 <code class="language-plaintext highlighter-rouge">*Messages*</code> buffer 就可以看到全部内容。</p>

<p><code class="language-plaintext highlighter-rouge">shell-command-to-string</code> 本质是执行命令， 并返回子进程的输出， 这个操作是同步的， 如果需要执行的命令非常耗时， 就会卡住 Emacs。</p>

<p>和 <code class="language-plaintext highlighter-rouge">shell-command-to-string</code> 同等的函数还有 <code class="language-plaintext highlighter-rouge">shell-command</code>, 可以通过下面代码来执行命令， 只不过不同的是命令行的输出会打印到 <code class="language-plaintext highlighter-rouge">my-command-output</code> 这个 buffer 中， 而不是转换成字符串。</p>

<div class="language-elisp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="nv">shell-command</span> <span class="s">"ls"</span> <span class="s">"my-command-output"</span><span class="p">)</span>
</code></pre></div></div>

<p>如果我们要编写一个插件， 它既能执行命令， 又不要卡住 Emacs 要怎么做呢？ 这时候就需要用 <code class="language-plaintext highlighter-rouge">make-process</code> ， 我直接上一段 EAF Git Client 的实战代码：</p>

<div class="language-elisp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="nb">defun</span> <span class="nv">eaf-git-run</span> <span class="p">(</span><span class="nv">prompt</span> <span class="nv">command</span><span class="p">)</span>
  <span class="p">(</span><span class="nv">message</span> <span class="nv">prompt</span><span class="p">)</span>
  <span class="p">(</span><span class="nv">save-window-excursion</span>
    <span class="p">(</span><span class="k">let</span> <span class="p">((</span><span class="nv">output-content</span> <span class="s">""</span><span class="p">))</span>
      <span class="p">(</span><span class="nv">make-process</span>
       <span class="ss">:name</span> <span class="s">"eaf-git-subprocess"</span>
       <span class="ss">:command</span> <span class="nv">command</span>
       <span class="ss">:filter</span> <span class="p">(</span><span class="k">lambda</span> <span class="p">(</span><span class="nv">process</span> <span class="nv">output</span><span class="p">)</span>
                 <span class="p">(</span><span class="k">setq</span> <span class="nv">output-content</span> <span class="p">(</span><span class="nb">format</span> <span class="s">"%s%s\n"</span> <span class="nv">output-content</span> <span class="nv">output</span><span class="p">)))</span>
       <span class="ss">:sentinel</span> <span class="p">(</span><span class="k">lambda</span> <span class="p">(</span><span class="nv">process</span> <span class="nv">event</span><span class="p">)</span>
                   <span class="p">(</span><span class="nv">message</span> <span class="p">(</span><span class="nb">string-trim</span> <span class="nv">output-content</span><span class="p">))</span>
                   <span class="p">)))))</span>
                   
<span class="p">(</span><span class="nb">defun</span> <span class="nv">eaf-git-pull</span> <span class="p">()</span>
  <span class="p">(</span><span class="nv">interactive</span><span class="p">)</span>
  <span class="p">(</span><span class="nv">eaf-git-run</span> <span class="s">"Git pull..."</span> <span class="p">(</span><span class="nb">list</span> <span class="s">"git"</span> <span class="s">"pull"</span> <span class="s">"--rebase"</span><span class="p">)))</span>                   
</code></pre></div></div>

<p>上面的代码需要实现一个完全异步的 <code class="language-plaintext highlighter-rouge">git pull</code> 命令， 即使 <code class="language-plaintext highlighter-rouge">git</code> 命令执行时间比较长。</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">:command</code>: 参数是一个列表格式， 包括命名工具名字和命名参数， 这里我们用的是 <code class="language-plaintext highlighter-rouge">(list "git" "pull" "--rebase")</code></li>
  <li><code class="language-plaintext highlighter-rouge">:filter</code>: 这个是一个过滤函数， 意思是当进程有任何输出的时候， 我们可以过滤 <code class="language-plaintext highlighter-rouge">output</code> 参数的内容， 上面代码是把所有的输出保存到 <code class="language-plaintext highlighter-rouge">output-content</code> 变量中</li>
  <li><code class="language-plaintext highlighter-rouge">:sentinel</code>: 是一个守护函数， 一般用于监听子进程的退出状态(<code class="language-plaintext highlighter-rouge">event</code>), 这里我们并不监听状态， 不管 <code class="language-plaintext highlighter-rouge">git</code> 命令是正常还是异常退出， 我们都在 minibuffer 中显示 <code class="language-plaintext highlighter-rouge">git</code> 命令的全部输出</li>
</ul>

<p>上面就是 Emacs 异步子进程需要掌握的知识， 更多高阶用法可以查看 <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Asynchronous-Processes.html">Creating an Asynchronous Process</a></p>

<p>如果你深入掌握这一节的内容， 你已经掌握利用外部命令行工具编写 Emacs 插件的原理。</p>

<h3 id="函数变量赋值">函数变量赋值</h3>
<p>再进一步学习之前， 需要先介绍一下函数内定义临时变量的方法：</p>

<div class="language-elisp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="nb">defun</span> <span class="nv">foo</span> <span class="p">()</span>
  <span class="p">(</span><span class="k">let</span> <span class="p">((</span><span class="nv">a</span> <span class="mi">1</span><span class="p">)</span>
        <span class="p">(</span><span class="nv">b</span> <span class="mi">2</span><span class="p">)</span>
        <span class="nv">c</span><span class="p">)</span>
    <span class="p">(</span><span class="k">setq</span> <span class="nv">a</span> <span class="mi">3</span><span class="p">)</span>
    <span class="p">(</span><span class="k">setq</span> <span class="nv">b</span> <span class="mi">4</span><span class="p">)</span>
    <span class="p">(</span><span class="k">setq</span> <span class="nv">c</span> <span class="mi">5</span><span class="p">)</span>
    <span class="p">(</span><span class="nv">message</span> <span class="s">"%s"</span> <span class="p">(</span><span class="nb">+</span> <span class="nv">a</span> <span class="nv">b</span> <span class="nv">c</span><span class="p">))))</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">let</code>： 就是让你可以在 Elisp 函数中定义临时变量， 这个临时变量会随着函数出作用域而消失， 需要注意的是 let 表达式的括号层级， 需要赋值的需要用在 () 里面再写 <code class="language-plaintext highlighter-rouge">(a 1)</code> 的形式， 不需要设置初始值的变量（比如上面的 c 变量）直接写就好了。 如果中途需要修改变量的值， 就用 <code class="language-plaintext highlighter-rouge">(setq var value)</code> 的方式来改变。</p>

<p>如果临时变量中的值有依赖关系， 就需要用 <code class="language-plaintext highlighter-rouge">let*</code> 的形式， 举例：</p>
<div class="language-elisp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="nb">defun</span> <span class="nv">foo</span> <span class="p">()</span>
  <span class="p">(</span><span class="k">let*</span> <span class="p">((</span><span class="nv">a</span> <span class="mi">1</span><span class="p">)</span>
         <span class="p">(</span><span class="nv">b</span> <span class="p">(</span><span class="nb">*</span> <span class="nv">a</span> <span class="mi">2</span><span class="p">)))</span>
    <span class="p">(</span><span class="nv">message</span> <span class="s">"%s"</span> <span class="p">(</span><span class="nb">+</span> <span class="nv">a</span> <span class="nv">b</span><span class="p">))))</span>
</code></pre></div></div>

<p>变量 <code class="language-plaintext highlighter-rouge">b</code> 依赖 <code class="language-plaintext highlighter-rouge">a</code> 的值， 就需要用 <code class="language-plaintext highlighter-rouge">let*</code> 替换 <code class="language-plaintext highlighter-rouge">let</code>, 以避免 Emacs 报 <code class="language-plaintext highlighter-rouge">Symbol’s value as variable is void: a</code> 的错误。</p>

<h3 id="读取输入">读取输入</h3>
<p>Elisp 读取输入有一种最简单的方法， 就是在 interactive 上做文章：</p>

<div class="language-elisp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="nb">defun</span> <span class="nv">interactive-example</span> <span class="p">(</span><span class="nv">file</span><span class="p">)</span>
  <span class="p">(</span><span class="nv">interactive</span> <span class="s">"fRead file: "</span><span class="p">)</span>
  <span class="p">(</span><span class="nv">message</span> <span class="s">"Hello %s"</span> <span class="nv">file</span><span class="p">))</span>
</code></pre></div></div>

<p>注意上面函数中第一个字符 <code class="language-plaintext highlighter-rouge">f</code>, 表示这个函数调用时， Elisp 强制你读取文件， 并提供文件列表补全。 我们也可以换成其他类型， 比如首字母是 <code class="language-plaintext highlighter-rouge">n</code> 表示只读取数字， <code class="language-plaintext highlighter-rouge">D</code> 表示只读取目录名， 更多的类型可以通过 M-x describe-function 来查看 <code class="language-plaintext highlighter-rouge">interactive</code> 的全部类型定义。</p>

<p>还有一种情况是， 我们在函数启动时并不想读取补全列表的值， 而是在函数中间的某些条件满足的情况下才弹出补全列表， 这时候就可以用 <code class="language-plaintext highlighter-rouge">(completing-read "Read test: " '("hello" "elisp" "programming"))</code> ， 第二个参数是提示字符串， 第三个参数是补全列表， 当完成补全后， <code class="language-plaintext highlighter-rouge">completing-read</code> 会自动返回匹配的补全项。</p>

<h3 id="pure-elisp-plugin">Pure Elisp Plugin</h3>
<p>Emacs 社区中数量最多的插件就是纯粹用 Elisp 来实现的插件， 这类插件本质就是通过 Emacs 内置的很多便捷函数， 通过光标移动操作来提升工作效率。</p>

<p>这类插件的开发的心法只用记住一点：</p>

<p class="line-quote">所谓的 Elisp 插件， 无非就是把你平常手动执行的命令脚本化</p>

<p>如果你对需要提升的工作流非常清晰， 其实写 Elisp 插件就是查询对应 API， 再把这些 API 揉和在一起的过程。</p>

<p>写这些插件的逻辑顺序大概是这样的： Emacs 你先保存一下当前光标的位置 -&gt; 移动到我指定的光标位置 -&gt; 执行字符串插入或者替换的工作 -&gt; 处理得不错， 跳到下一个位置 -&gt; … -&gt; 循环往复, 整个插件如果有 10 步操作， 你可以一步一步操作的编写， 编写好一次执行一次 <code class="language-plaintext highlighter-rouge">load-file</code> 看看效果， 第一步没问题， 继续编写第二步的代码， 然后第三步 … 直到最后编写完所有插件。</p>

<p>好， 书归正传， 闲言少叙， 下面我就介绍一些非常实用的 API 来帮助大家快速入门：</p>

<h4 id="插件常用-api">插件常用 API</h4>

<p><code class="language-plaintext highlighter-rouge">save-excursion</code>: 这个宏的意思是保存光标的位置和当前 buffer 的状态， 再执行任意 Elisp 函数。 执行完成以后， 这个宏会自动帮你恢复执行之前的状态， 简而言之， 就是这个宏包裹下的任何 Elisp 代码都不会改变光标处的状态， 比如:</p>

<div class="language-elisp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="nv">save-excursion</span>
 <span class="p">(</span><span class="nv">forward-line</span><span class="p">)</span>
 <span class="p">(</span><span class="nv">point</span><span class="p">))</span>
</code></pre></div></div>

<p>上面这段代码解释： 执行代码之前先用 <code class="language-plaintext highlighter-rouge">save-excursion</code> 保护一下， 接着执行 <code class="language-plaintext highlighter-rouge">forward-line</code> 跳到下一行， 最后返回 Lisp 函数最后一个函数的结果， <code class="language-plaintext highlighter-rouge">(point)</code> 就是返回当前光标的位置， 这一小段代码总结起来就是不要动光标的位置前提下, 告诉我下一行光标的位置。</p>

<p><code class="language-plaintext highlighter-rouge">goto-char</code>: 这个函数很简单， 就是你告诉 Emacs 光标跳到什么地方， 可以是最开始 <code class="language-plaintext highlighter-rouge">(point-min)</code>、 最后 <code class="language-plaintext highlighter-rouge">(point-max)</code>, 行首 <code class="language-plaintext highlighter-rouge">(point-at-bol)</code> ， 行尾 <code class="language-plaintext highlighter-rouge">(point-at-eol)</code>, 当然也可以是任何你指定的位置。</p>

<p><code class="language-plaintext highlighter-rouge">insert</code>: 顾名思义， <code class="language-plaintext highlighter-rouge">(insert "hello")</code> 就是在光标处插入 <code class="language-plaintext highlighter-rouge">hello</code> 这个字符串。</p>

<p><code class="language-plaintext highlighter-rouge">format</code>: insert 字符串时， 经常需要组装字符串， 相对于 <code class="language-plaintext highlighter-rouge">concat</code> 的拼装， 可以用 <code class="language-plaintext highlighter-rouge">(format "Hello: %s %s" "elisp" "programming")</code> 的形式快速拼接一个字符串。</p>

<p><code class="language-plaintext highlighter-rouge">delete-char</code>: 向右删除光标处指定长度的字符， 如果字符是负数就向左删除。</p>

<p><code class="language-plaintext highlighter-rouge">delete-region</code>： 删除 buffer 内指定区域的内容， 一般最简单的方法就是定义 <code class="language-plaintext highlighter-rouge">start</code> 变量， 先把光标移动到开始的地方， 用 <code class="language-plaintext highlighter-rouge">(setq start (point))</code> 保存下， 再移动到结尾的地方， 最后执行 <code class="language-plaintext highlighter-rouge">(delete-region start (point))</code> 就可以删除指定范围内所有字符串。</p>

<p><code class="language-plaintext highlighter-rouge">search-forward-regexp</code>: 这个函数就是向右搜索正则， 当找到对应的正则， 光标就会移动过去， 我一般会用 <code class="language-plaintext highlighter-rouge">(search-forward-regexp "search" nil t)</code> 的形式， <code class="language-plaintext highlighter-rouge">search</code> 是需要搜索的正则字符串, 接着的 <code class="language-plaintext highlighter-rouge">nil</code> 表示搜索范围不限制， 最后的 <code class="language-plaintext highlighter-rouge">t</code> 表示万一没有收到不要抛出 error, 而是直接返回 <code class="language-plaintext highlighter-rouge">nil</code> 这个结果。 这个函数主要用于快速让 Emacs 跳到你指定的位置， 配合 <code class="language-plaintext highlighter-rouge">save-excursion</code> 宏使用， 可以用作确认光标后有没有某个字符串的检查函数。 对应的， 向左搜索的函数是 <code class="language-plaintext highlighter-rouge">search-backward-regexp</code>， 用法一样， 只是搜索的方向不一样。</p>

<p><code class="language-plaintext highlighter-rouge">replace-match</code>: 一般是调用 <code class="language-plaintext highlighter-rouge">search-forward-regexp</code> 或 <code class="language-plaintext highlighter-rouge">re-search-forward</code> 后， 再通过 <code class="language-plaintext highlighter-rouge">replace-match</code> 对搜索匹配的字符串进行替换。</p>

<p><code class="language-plaintext highlighter-rouge">buffer-string</code>: 获取 buffer 的全部内容， 也可以用 <code class="language-plaintext highlighter-rouge">buffer-substring-no-properties</code> 返回指定范围的内容。</p>

<h4 id="buffer-处理">buffer 处理</h4>
<p>我们在编写插件的时候, 需要通过对 buffer 进行操作， 有两种方法：</p>

<ol>
  <li>临时在一个 buffer 中执行操作后， 再返回临时 buffer 的内容， 就可以使用下面的做法：</li>
</ol>

<div class="language-elisp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="nv">with-temp-buffer</span>
  <span class="p">(</span><span class="nv">insert</span> <span class="s">"hello"</span><span class="p">)</span>
  <span class="p">(</span><span class="nv">buffer-string</span><span class="p">))</span>
</code></pre></div></div>

<ol>
  <li>对指定的 buffer 执行操作， 需要 <code class="language-plaintext highlighter-rouge">with-current-buffer</code> 来切换到指定的 buffer， 并清空其内容：</li>
</ol>

<div class="language-elisp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="nv">with-current-buffer</span> <span class="s">"buffer-name"</span>
  <span class="p">(</span><span class="nv">erase-buffer</span><span class="p">))</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">ignore-errors</code>: <code class="language-plaintext highlighter-rouge">ignore-errors</code> 发现错误就返回 nil， 我们可以根据这个特性来编写一些判断函数， 比如 <code class="language-plaintext highlighter-rouge">(ignore-errors (require 'multiple-cursors))</code> 这个函数可以强制用 <code class="language-plaintext highlighter-rouge">require</code> 去加载 <code class="language-plaintext highlighter-rouge">multiple-cursors</code> 插件， 如果用户的插件目录里面确实没有这个插件， 我们通过 <code class="language-plaintext highlighter-rouge">ignore-errors</code> 就可以快速判定， 同时也不要再执行对应的分支代码。 这种方法是我平常写 Elisp 插件常用的技巧之一， 既避免用户没有安装插件报错， 又能在用户安装了插件后立即启用对应的函数功能。</p>

<h4 id="窗口布局保存和恢复">窗口布局保存和恢复</h4>
<p>当插件需要破坏用户的窗口布局时， 最佳实践是先用 <code class="language-plaintext highlighter-rouge">current-window-configuration</code> 读取当前窗口的布局细节， 执行插件代码后， 再用 <code class="language-plaintext highlighter-rouge">set-window-configuration</code> 恢复窗口布局， 避免打断用户的操作。 实例代码如下， 因为比较简单直白， 就不再详述：</p>

<div class="language-elisp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="nb">defvar</span> <span class="nv">window-configuration-var</span> <span class="no">nil</span><span class="p">)</span>

<span class="p">(</span><span class="k">setq</span> <span class="nv">window-configuration-var</span> <span class="p">(</span><span class="nv">current-window-configuration</span><span class="p">))</span>

<span class="nv">plugin</span> <span class="nv">code</span> <span class="nv">here...</span>

<span class="p">(</span><span class="nv">set-window-configuration</span> <span class="nv">window-configuration-var</span><span class="p">)</span>
</code></pre></div></div>

<p>对应的， 一般窗口布局的变化主要用 <code class="language-plaintext highlighter-rouge">delete-other-windows</code>， <code class="language-plaintext highlighter-rouge">split-window</code> 和 <code class="language-plaintext highlighter-rouge">other-window</code> 这三个函数相互配合， 具体用法请使用 M-x <code class="language-plaintext highlighter-rouge">describe-function</code> 来查询这三个 API 的具体用法。</p>

<h3 id="自定义-mode">自定义 mode</h3>
<p>写完 Emacs 插件后， 一般都需要自定义一个 mode, 方便用户快速加载。</p>

<p>假如你要写一个叫 <code class="language-plaintext highlighter-rouge">new-plugin</code> 的 mode， 代码很简单， 先依葫芦画瓢就好了:</p>

<div class="language-elisp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="nv">define-derived-mode</span> <span class="nv">new-plugin-mode</span> <span class="nv">text-mode</span> <span class="s">"new-plugin"</span>
  <span class="p">(</span><span class="nv">interactive</span><span class="p">)</span>
  <span class="p">(</span><span class="nv">kill-all-local-variables</span><span class="p">)</span>                  <span class="c1">; 删除 buffer 下所有的局部变量， 避免其他 mode 的干扰</span>
  <span class="p">(</span><span class="k">setq</span> <span class="nv">major-mode</span> <span class="ss">'new-plugin-mode</span><span class="p">)</span>          <span class="c1">; 设置当前的 mode 为 new-plugin-mode</span>
  <span class="p">(</span><span class="k">setq</span> <span class="nv">mode-name</span> <span class="s">"new-plugin"</span><span class="p">)</span>               <span class="c1">; 设置 mode 的名称</span>
  <span class="p">(</span><span class="nv">new-plugin-highlight-keywords</span><span class="p">)</span>             <span class="c1">; 根据正则表达式提供语法高亮</span>
  <span class="p">(</span><span class="nv">use-local-map</span> <span class="nv">new-plugin-mode-map</span><span class="p">)</span>         <span class="c1">; 加载 mode 对应的快捷键</span>
  <span class="p">(</span><span class="nv">run-hooks</span> <span class="ss">'new-plugin-mode-hook</span><span class="p">))</span>          <span class="c1">; 加载 mode 对应的 hook, 注意 new-plugin-mode-hook 会自动生成</span>
  
<span class="p">(</span><span class="nb">defvar</span> <span class="nv">new-plugin-mode-map</span>
  <span class="p">(</span><span class="k">let</span> <span class="p">((</span><span class="nb">map</span> <span class="p">(</span><span class="nv">make-sparse-keymap</span><span class="p">)))</span>
    <span class="p">(</span><span class="nv">define-key</span> <span class="nb">map</span> <span class="p">(</span><span class="nv">kbd</span> <span class="s">"C-m"</span><span class="p">)</span>       <span class="nf">#'</span><span class="nv">new-plugin-function</span><span class="p">)</span>   <span class="c1">; 绑定 new-plugin-function 函数到快捷键 C-m 上</span>
    <span class="nb">map</span><span class="p">)</span>
  <span class="s">"Keymap used by `new-plugin-mode'."</span><span class="p">)</span>
  
<span class="p">(</span><span class="nb">defun</span> <span class="nv">new-plugin-highlight-keywords</span> <span class="p">()</span>
  <span class="s">"Highlight keywords."</span>
  <span class="c1">;; Add keywords for highlight.</span>
  <span class="p">(</span><span class="nv">font-lock-add-keywords</span>
   <span class="no">nil</span>
   <span class="o">'</span><span class="p">(</span>
     <span class="p">(</span><span class="s">"regexp-string"</span> <span class="o">.</span> <span class="ss">'font-lock-constant-face</span><span class="p">)</span>   <span class="c1">; 当 buffer 内容匹配正则， 就会自动按照 font-lock-constant-face 提供颜色高亮</span>
     <span class="p">))</span>
  <span class="c1">;; Enable font lock.</span>
  <span class="p">(</span><span class="nv">font-lock-mode</span> <span class="mi">1</span><span class="p">))</span>                               <span class="c1">; 开启语法高亮</span>
</code></pre></div></div>

<p>很多同学都问 mode 怎么定义， 局部按键怎么绑定以及语法高亮怎么做， 其实核心就上面这二十多行代码。</p>

<p>Emacs 插件开发的基础设施非常完善， 你不用太理解上面这些代码意思就可以开发自己的 mode。</p>

<h3 id="基于文字属性的高亮">基于文字属性的高亮</h3>
<p>Emacs 里有一个 text property 的概念， 简单来说就是三个步骤：</p>

<ol>
  <li>生成一个字符串， 比如 “hello world”</li>
  <li>通过 <code class="language-plaintext highlighter-rouge">add-face-text-property</code> 给字符串增加 text property， 一般会对应选择一个 face 来高亮属性范围内的文字</li>
  <li>通过 <code class="language-plaintext highlighter-rouge">insert</code> 来插入第二步附加属性的字符串</li>
</ol>

<p>举例：</p>

<div class="language-elisp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="nb">defvar</span> <span class="nv">text-property-example-string</span> <span class="s">"hello world"</span><span class="p">)</span>
<span class="p">(</span><span class="nv">add-face-text-property</span> <span class="mi">0</span> <span class="mi">5</span> <span class="ss">'font-lock-function-name-face</span> <span class="ss">'append</span> <span class="nv">text-property-example-string</span><span class="p">)</span>
<span class="p">(</span><span class="nv">insert</span> <span class="nv">text-property-example-string</span><span class="p">)</span>
</code></pre></div></div>

<p>注意， 测试上面代码的时候， 先用 M-x text-mode 的方式进入纯文本模式， 再通过 <code class="language-plaintext highlighter-rouge">eval-expression</code> 的方式依次执行来验证， 避免特定编程语言本身的正则语法高亮干扰 text property.</p>

<h3 id="基于-overlay-的高亮">基于 overlay 的高亮</h3>
<p>Emacs 中 overlay 是另外一种高亮方式， 从名字看， 它可以覆盖到 Emacs Buffer 的文字之上。</p>

<p>overlay 和 text property 的区别是， overlay 可以理解成为一个独立的对象， 它有自己的属性（位置、颜色等信息）， overlay 的高亮只是刚好和被高亮的字符串在位置上是重合的， 仅此而已， 而 text property 的属性是依附于字符串内容， 如果字符串被删除了， 对应的 text property 也就被一同删除了。</p>

<p>而 overlay 的使用比较简单：</p>
<ol>
  <li>创建 overlay： 用 <code class="language-plaintext highlighter-rouge">make-overlay</code> 就可以创建一个 overlay 对象， 一般我们都在光标原地创建 <code class="language-plaintext highlighter-rouge">(set  (make-local-variable 'overlay-var) (make-overlay (point) (point)))</code> 。</li>
  <li>赋予颜色： <code class="language-plaintext highlighter-rouge">(overlay-put overlay-var 'face 'font-lock-function-name-face)</code>, 不管 overlay 将来用在什么位置， 先通过 <code class="language-plaintext highlighter-rouge">overlay-put</code> 给 overlay 变量赋予 face 对应的颜色属性。</li>
  <li>显示 overlay: <code class="language-plaintext highlighter-rouge">(move-overlay overlay-var start end)</code> 通过 <code class="language-plaintext highlighter-rouge">move-overlay</code> 调整 overlay 的开始和结束位置， overlay 就会覆盖显示在指定范围的上方。</li>
  <li>删除 overlay: 当不需要 overlay 的时候， 用 <code class="language-plaintext highlighter-rouge">(delete-overlay overlay-var)</code> 删除即可</li>
</ol>

<p>overlay 的应用场景主要用于那些光标下字符串已经改变， 但是显示效果依然不变的情况， 比如 <a href="https://github.com/manateelazycat/insert-translated-name">insert-translated-name.el</a>, highlight-match-tag 等插件。</p>

<p>overlay 的缺陷是数量不能太多， 太多会导致性能有问题。 如果使用场景有大量关键字高亮的需求， 用 font-lock 或者 text property 是一种性能更好的方法。</p>

<h3 id="条件分支">条件分支</h3>
<p>Elisp 有两种条件分支的处理， 如果每个分支的条件判定方式都不一样， 需要使用 <code class="language-plaintext highlighter-rouge">cond</code>:</p>

<div class="language-elisp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="k">setq</span> <span class="nv">test</span> <span class="s">"hello"</span><span class="p">)</span>

<span class="p">(</span><span class="nb">cond</span> <span class="p">((</span><span class="nb">&gt;</span> <span class="p">(</span><span class="nb">length</span> <span class="nv">test</span><span class="p">)</span> <span class="mi">0</span><span class="p">)</span>
       <span class="p">(</span><span class="nv">message</span> <span class="s">"branch 1"</span><span class="p">))</span>
      <span class="p">((</span><span class="nv">string-prefix-p</span> <span class="nv">test</span> <span class="s">"hel"</span><span class="p">)</span>
       <span class="p">(</span><span class="nv">message</span> <span class="s">"branch 2"</span><span class="p">))</span>
      <span class="p">(</span><span class="no">t</span>
       <span class="p">(</span><span class="nv">message</span> <span class="s">"branch 3"</span><span class="p">))</span>
 <span class="p">)</span>
</code></pre></div></div>

<p>如果条件是一个类型的， 用 <code class="language-plaintext highlighter-rouge">pcase</code> 会简洁一点：</p>
<div class="language-elisp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="k">setq</span> <span class="nv">lang</span> <span class="s">"elisp"</span><span class="p">)</span>

<span class="p">(</span><span class="nv">pcase</span> <span class="nv">lang</span>
 <span class="p">(</span><span class="s">"elisp"</span> <span class="p">(</span><span class="nv">message</span> <span class="s">"got elisp"</span><span class="p">))</span>
 <span class="p">(</span><span class="s">"java"</span> <span class="p">(</span><span class="nv">message</span> <span class="s">"got java"</span><span class="p">))</span>
 <span class="p">(</span><span class="s">"golang"</span> <span class="p">(</span><span class="nv">message</span> <span class="s">"got golang"</span><span class="p">))</span>
 <span class="p">(</span><span class="nv">_</span> <span class="p">(</span><span class="nv">message</span> <span class="s">"got nothing"</span><span class="p">))</span>
 <span class="p">)</span>
</code></pre></div></div>

<h3 id="循环列表">循环列表</h3>
<p>对于列表操作， 我平常用 dolist 比较多, 相对于 cl-loop 更容易理解：</p>

<div class="language-elisp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="nb">dolist</span> <span class="p">(</span><span class="nv">element</span> <span class="o">'</span><span class="p">(</span><span class="s">"hello"</span> <span class="s">"elisp"</span> <span class="s">"programming"</span><span class="p">))</span>
  <span class="p">(</span><span class="nv">message</span> <span class="s">"Print: %s"</span> <span class="nv">element</span><span class="p">)</span>
<span class="p">)</span>
</code></pre></div></div>

<p>如果要循环列表， 并根据匹配的条件判断后停止循环， 需要使用 <code class="language-plaintext highlighter-rouge">cl-dolist</code> 和 <code class="language-plaintext highlighter-rouge">cl-return</code>:</p>

<div class="language-elisp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="nv">cl-dolist</span> <span class="p">(</span><span class="nv">buffer</span> <span class="p">(</span><span class="nv">buffer-list</span><span class="p">))</span>
  <span class="p">(</span><span class="nb">when</span> <span class="p">(</span><span class="nb">string-equal</span> <span class="p">(</span><span class="nv">buffer-file-name</span> <span class="nv">buffer</span><span class="p">)</span> <span class="s">"hello"</span><span class="p">)</span>
    <span class="p">(</span><span class="nv">kill-buffer</span> <span class="nv">buffer</span><span class="p">)</span>
    <span class="p">(</span><span class="nv">cl-return</span><span class="p">)))</span>
</code></pre></div></div>
<p>上面这段代码的意思是， 如果找到匹配 <code class="language-plaintext highlighter-rouge">hello</code> 字符串的 buffer 就用命令 <code class="language-plaintext highlighter-rouge">kill-buffer</code> 关闭 buffer, 并结束循环。</p>

<p>注意, <code class="language-plaintext highlighter-rouge">cl-return</code> 必须和 <code class="language-plaintext highlighter-rouge">cl-dolist</code> 匹配使用才管用， 如果匹配 <code class="language-plaintext highlighter-rouge">dolist</code> 则不生效。</p>

<h3 id="获取光标处的内容">获取光标处的内容</h3>
<p>Emacs 中获取光标处的内容主要是用 <code class="language-plaintext highlighter-rouge">thing-at-point</code> 这个函数， 比如 <code class="language-plaintext highlighter-rouge">(thing-at-point 'symbol)</code> 获取光标处的符号， <code class="language-plaintext highlighter-rouge">(thing-at-point 'word)</code> 获取光标处的单词， <code class="language-plaintext highlighter-rouge">(thing-at-point 'url)</code> 获取光标处的链接等等。</p>

<p>我很多编辑插件都会用的两个函数： <code class="language-plaintext highlighter-rouge">is-in-comment-p</code> 和 <code class="language-plaintext highlighter-rouge">is-in-string-p</code> ， 非常方便的知道光标处是否在字符串或者注释区域， 下面以 lsp-bridge 代码举例：</p>

<div class="language-elisp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="nb">defun</span> <span class="nv">lsp-bridge-in-comment-p</span> <span class="p">(</span><span class="k">&amp;optional</span> <span class="nv">state</span><span class="p">)</span>
  <span class="p">(</span><span class="nb">ignore-errors</span>
    <span class="p">(</span><span class="nb">unless</span> <span class="p">(</span><span class="nb">or</span> <span class="p">(</span><span class="nv">bobp</span><span class="p">)</span> <span class="p">(</span><span class="nv">eobp</span><span class="p">))</span>
      <span class="p">(</span><span class="nv">save-excursion</span>
        <span class="p">(</span><span class="nb">or</span>
         <span class="p">(</span><span class="nb">nth</span> <span class="mi">4</span> <span class="p">(</span><span class="nb">or</span> <span class="nv">state</span> <span class="p">(</span><span class="nv">lsp-bridge-current-parse-state</span><span class="p">)))</span>
         <span class="p">(</span><span class="nb">eq</span> <span class="p">(</span><span class="nv">get-text-property</span> <span class="p">(</span><span class="nv">point</span><span class="p">)</span> <span class="ss">'face</span><span class="p">)</span> <span class="ss">'font-lock-comment-face</span><span class="p">))</span>
        <span class="p">))))</span>

<span class="p">(</span><span class="nb">defun</span> <span class="nv">lsp-bridge-in-string-p</span> <span class="p">(</span><span class="k">&amp;optional</span> <span class="nv">state</span><span class="p">)</span>
  <span class="p">(</span><span class="nb">ignore-errors</span>
    <span class="p">(</span><span class="nb">unless</span> <span class="p">(</span><span class="nb">or</span> <span class="p">(</span><span class="nv">bobp</span><span class="p">)</span> <span class="p">(</span><span class="nv">eobp</span><span class="p">))</span>
      <span class="p">(</span><span class="nv">save-excursion</span>
        <span class="p">(</span><span class="nb">and</span>
         <span class="p">(</span><span class="nb">nth</span> <span class="mi">3</span> <span class="p">(</span><span class="nb">or</span> <span class="nv">state</span> <span class="p">(</span><span class="nv">lsp-bridge-current-parse-state</span><span class="p">)))</span>
         <span class="p">(</span><span class="nb">not</span> <span class="p">(</span><span class="nb">equal</span> <span class="p">(</span><span class="nv">point</span><span class="p">)</span> <span class="p">(</span><span class="nv">line-end-position</span><span class="p">))))</span>
        <span class="p">))))</span>

<span class="p">(</span><span class="nb">defun</span> <span class="nv">lsp-bridge-current-parse-state</span> <span class="p">()</span>
  <span class="p">(</span><span class="k">let</span> <span class="p">((</span><span class="nv">point</span> <span class="p">(</span><span class="nv">point</span><span class="p">)))</span>
    <span class="p">(</span><span class="nv">beginning-of-defun</span><span class="p">)</span>
    <span class="p">(</span><span class="nb">when</span> <span class="p">(</span><span class="nb">equal</span> <span class="nv">point</span> <span class="p">(</span><span class="nv">point</span><span class="p">))</span>
      <span class="p">(</span><span class="nv">beginning-of-line</span><span class="p">))</span>
    <span class="p">(</span><span class="nv">parse-partial-sexp</span> <span class="p">(</span><span class="nv">point</span><span class="p">)</span> <span class="nv">point</span><span class="p">)))</span>
</code></pre></div></div>

<p>这两个函数的技术基础是 <code class="language-plaintext highlighter-rouge">parse-partial-sexp</code>, 它可以分析光标处的语法状态， 这个函数也是 paredit 这类插件的核心技术原理。</p>

<h2 id="类似教程">类似教程</h2>
<ul>
  <li><a href="https://github.com/xuchunyang/elisp-demos/blob/master/elisp-demos.org">Elisp Demos</a>: 国内大佬维护的一个 Elisp API 演示实例</li>
  <li><a href="http://caiorss.github.io/Emacs-Elisp-Programming/Elisp_Programming.html">Elisp Programming</a></li>
  <li><a href="https://github.com/alphapapa/emacs-package-dev-handbook">The Emacs Package Developer’s Handbook</a></li>
  <li><a href="https://github.com/p3r7/awesome-elisp">Awesome Elisp</a></li>
  <li><a href="https://list.community/emacs-tw/awesome-emacs">Awesome Emacs</a></li>
</ul>

<h2 id="最后">最后</h2>
<p>我自己写了很多 Elisp 插件， 但是回忆起来， 上面分享的内容基本覆盖到写一个插件所需的 70% 内容， 也是大家 Elisp 编程入门最容易卡壳的地方， 为了方便大家理解, 我只写了其中关键的部分， 一些基本的概念， 如 defvar， defun、 defcustom、 setq、 if、 when、 unless 等我并没有展开细讲， 这些都属于每个语言相通的部分, 大家自行 Google 应该就可以很快理解。</p>

<p>今天讲的每个 API 的详细参数用法， 请大家善用 <code class="language-plaintext highlighter-rouge">describe-variable</code> 和 <code class="language-plaintext highlighter-rouge">describe-function</code>, 进阶查找 API 请善用 <code class="language-plaintext highlighter-rouge">apropos-variable</code> 和 <code class="language-plaintext highlighter-rouge">apropos-function</code>， 后面这两个命令可以通过正则表达式来挖掘 Elisp 有用但你很难知道全称的 API。</p>

<p>其实 Elisp 编程挺容易的， 特别是基于 Emacs 解释器的编程环境， Elisp 即写即加载的测试方式， 要比大多数语言的开发效率都高， 因为它一瞬间就给你反馈， 到底效果好不好马上就可以知道。</p>

<p>纸上得来终觉浅， 绝知此事要躬行， 希望进阶掌握高级编程技巧的同学， 请一页一页的耐心读 <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/index.html">GNU Emacs Lisp Reference Manual</a>。</p>
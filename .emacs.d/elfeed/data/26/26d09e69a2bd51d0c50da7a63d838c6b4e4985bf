<h2 id="不断变化的-gfw">不断变化的 GFW</h2>
<p>GFW 不断在变化，而我们的代理策略也要一直更新，我会定期总结 FQ 的最佳攻略，方便自己备忘。</p>

<p>注意：文中的 <code class="language-plaintext highlighter-rouge">your_vps_ip</code> 要换成你自己的服务器 IP 地址。</p>

<h2 id="1-配置-trojan-代理">1. 配置 Trojan 代理</h2>

<h3 id="11-准备工作">1.1 准备工作</h3>

<ul>
  <li>一台境外的 VPS, 不需要购买域名和配置证书</li>
</ul>

<h3 id="12-vps-安装-debian-9">1.2 VPS 安装 Debian 9</h3>

<p>一般 VPS 都有操作系统安装服务，安装 Debian 9 以后，替换 /etc/apt/sources.list 文件内容为 163 镜像源，提升软件安装速度:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>deb http://mirrors.163.com/debian/ stretch main non-free contrib
deb http://mirrors.163.com/debian/ stretch-updates main non-free contrib
deb http://mirrors.163.com/debian/ stretch-backports main non-free contrib
deb-src http://mirrors.163.com/debian/ stretch main non-free contrib
deb-src http://mirrors.163.com/debian/ stretch-updates main non-free contrib
deb-src http://mirrors.163.com/debian/ stretch-backports main non-free contrib
deb http://mirrors.163.com/debian-security/ stretch/updates main non-free contrib
deb-src http://mirrors.163.com/debian-security/ stretch/updates main non-free contrib
</code></pre></div></div>

<h3 id="13-安装-trojan-服务端">1.3 安装 Trojan 服务端</h3>

<p>通过命令 <code class="language-plaintext highlighter-rouge">ssh root@your_vps_ip</code> 登录 VPS 服务器后，执行下面脚本自动安装和配置 Trojan 服务端:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>wget <span class="nt">-N</span> <span class="nt">--no-check-certificate</span> https://raw.githubusercontent.com/mark-hans/trojan-wiz/master/ins.sh <span class="o">&amp;&amp;</span> <span class="nb">chmod</span> +x ins.sh <span class="o">&amp;&amp;</span> bash ins.sh
</code></pre></div></div>

<p>安装过程中提示“请选择证书模式”，选择”使用 IP 自签发证书”的模式。</p>

<h3 id="14-启动-trojan-服务端">1.4 启动 Trojan 服务端</h3>

<p>安装完成后，使用命令<code class="language-plaintext highlighter-rouge">systemctl start trojan-gfw</code> 启动 trojan 服务端, 同时可以用命令<code class="language-plaintext highlighter-rouge">systemctl status trojan-gfw</code>来检查 trojan 服务端的状态，如果状态为<code class="language-plaintext highlighter-rouge">active(running)</code>, 证明 trojan 服务端已经启动。</p>

<h3 id="15-拷贝服务端配置文件">1.5 拷贝服务端配置文件</h3>

<p>trojan 服务端配置成功以后会在 VPS 的/home/trojan/目录下生成 client.json 和 ca-cert.pem 两个文件:</p>

<ul>
  <li>client.json 是客户端配置文件，已经按照 VPS IP 配置好</li>
  <li>ca-cert.pem 是证书文件，已经按照 VPS 配置好</li>
</ul>

<p>比如你的 VPS IP 为 xxx.xxx.xxx.xxx，使用下面的命令来完成拷贝服务端配置文件到本机：</p>

<p><code class="language-plaintext highlighter-rouge">scp root@xxx.xxx.xxx.xxx:/home/trojan/ca-cert.pem ./</code></p>

<p><code class="language-plaintext highlighter-rouge">scp root@xxx.xxx.xxx.xxx:/home/trojan/client.json ./</code></p>

<h3 id="16-下载-trojan-客户端">1.6 下载 Trojan 客户端</h3>

<ul>
  <li>首先在 VPS 使用命令 <code class="language-plaintext highlighter-rouge">ping github.com</code>, 获取 github.com 的 ip 地址, 比如是 192.30.253.112</li>
  <li>在本机 /etc/hosts 文件中加入 <code class="language-plaintext highlighter-rouge">192.30.253.112 github.com</code> , 这样访问 github 页面就暂时不需要 FQ</li>
  <li>重启本机网络服务: <code class="language-plaintext highlighter-rouge">sudo systemctl restart NetworkManager</code></li>
  <li>下载 Trojan 客户端: <code class="language-plaintext highlighter-rouge">wget https://github.com/trojan-gfw/trojan/releases/download/v1.14.1/trojan-1.14.1-linux-amd64.tar.xz</code></li>
</ul>

<p>下载 trojan-1.14.1-linux-amd64.tar.xz 后，解压文件，把 ca-cert.pem 和 client.json 拷贝到 trojan 目录下。</p>

<h3 id="17-启动-trojan-客户端">1.7 启动 Trojan 客户端</h3>

<p><code class="language-plaintext highlighter-rouge">./trojan -c client.json</code> 即可在 127.0.0.1:1080 建立本地代理连接，最后通过 Chrome SwitchyOmega 来配置浏览器的代理设置。</p>

<p>在浏览器验证可以 FQ 以后，你可以清除刚刚在本机 /etc/hosts 的 github 设置。</p>

<p>注意 client.json 的 <code class="language-plaintext highlighter-rouge">local_addr</code> 需要设置为 <code class="language-plaintext highlighter-rouge">0.0.0.0</code> , 方便后面的 proxy-ns 可以正常代理。</p>

<h2 id="2-配置命令行代理">2. 配置命令行代理</h2>

<h3 id="21-安装-proxy-ns">2.1 安装 proxy-ns</h3>

<p>proxy-ns 和其他工具的实现原理不一样的是， 它利用的是 Linux 的 namespace 来实现， 可以很好的支持进程下所有子进程的代理， 即使是那些静态编译的工具。</p>

<p>安装方法 <code class="language-plaintext highlighter-rouge">yay -S proxy-ns</code>, 用 <code class="language-plaintext highlighter-rouge">sudo systemctl start proxy-nsd.service</code> 命令启动 proxy-nsd 服务, 同时用 <code class="language-plaintext highlighter-rouge">sudo systemctl enable proxy-nsd.service</code> 命令加入到系统启动服务中。</p>

<h2 id="3-配置手机代理">3. 配置手机代理</h2>

<h3 id="31-安装-igniter">3.1 安装 Igniter</h3>

<ol>
  <li>在 PC 上配置好代理，首先下载 Trojan 的安卓客户端<a href="https://github.com/trojan-gfw/igniter/releases">Igniter</a></li>
  <li>使用 <a href="https://github.com/filebrowser/filebrowser">filebrowser-bin</a> 这个应用来传递文件给平板</li>
  <li>安装 Igniter</li>
</ol>

<h3 id="32-配置-igniter">3.2 配置 Igniter</h3>
<p>启动 Igniter 后，按照下面的方式在平板上配置 Trojan 信息：</p>

<ol>
  <li>填写服务器别名和服务器 IP 地址</li>
  <li>填写服务器 Trojan 协议密码，一般在 client.json 文件中的 password 字段中</li>
  <li>禁用 “验证证书” 选项，因为第一步填写的是 IP 地址，所以不用验证证书，要不是会显示 Closed by peer 的错误</li>
</ol>

<p>配置好以后，点击底部链接按钮，然后在 Igniter 右上角点击地球图标按钮先测试一下代理网络是否正常。代理网络正常会显示 “连接 https://www.google.com 用时 xxx ms” 的提示。</p>

<h3 id="33-增加过滤应用">3.3 增加过滤应用</h3>

<p>在 Igniter 右上角有一个菜单按钮，选择过滤应用，找到对应的应用（比如浏览器），打开过滤开关即可针对特定应用使用代理，而不会让所有应用（比如网易云音乐）走代理网络。</p>

<h2 id="4-配置规则代理">4. 配置规则代理</h2>

<h3 id="41-安装-clash">4.1 安装 Clash</h3>
<p>首先从<a href="https://github.com/Dreamacro/clash">Clash</a>安装 Clash, Arch 直接用 pacman 安装即可。</p>

<h3 id="42-配置-clash">4.2 配置 Clash</h3>
<p>首先你需要在本地配置一个本地 socks5 代理, 比如本地 socks5 代理是 127.0.0.1 的 1080 端口（如果不是，请修改下面配置中 proxies 字段内容），然后新建一个 config.yml 配置文件：</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># config.yml</span>
<span class="c"># 本地 http(s)代理端口</span>
port: 18080
<span class="c"># 本地 socks5 代理端口</span>
socks-port: 10808
<span class="c"># 是否允许局域网中其他机器访问</span>
allow-lan: <span class="nb">false</span>
<span class="c"># 仅当 allow-lan 设置为 true 时生效</span>
<span class="c"># '*': 绑定所有 IP</span>
<span class="c"># 192.168.122.11:绑定单个 IPV4</span>
<span class="c"># "[aaaa::a8aa:ff:fe09:57d8]":绑定单个 IPV6</span>
bind-address: <span class="s1">'*'</span>
<span class="c"># 运行模式</span>
<span class="c"># rule: 基于规则</span>
<span class="c"># global: 全局代理</span>
<span class="c"># direct: 不代理</span>
mode: rule
<span class="c"># 日志输出级别</span>
<span class="c"># info / warning / error / debug / silent</span>
log-level: info
<span class="c"># 当设置为 false 时，不解析 IPV6 地址</span>
ipv6: <span class="nb">false</span>
<span class="c"># 流量出口</span>
interface-name: wlp4s0

<span class="c"># DNS 设置</span>
dns:
  <span class="nb">enable</span>: <span class="nb">false
  </span>listen: 0.0.0.0:53
  <span class="c"># ipv6: false # when the false, response to AAAA questions will be empty</span>

  <span class="c"># These nameservers are used to resolve the DNS nameserver hostnames below.</span>
  <span class="c"># Specify IP addresses only</span>
  default-nameserver:
    - 114.114.114.114
    - 8.8.8.8
  enhanced-mode: redir-host <span class="c"># or fake-ip</span>
  fake-ip-range: 198.18.0.1/16 <span class="c"># Fake IP addresses pool CIDR</span>
  <span class="c"># use-hosts: true # lookup hosts and return IP record</span>

  <span class="c"># Hostnames in this list will not be resolved with fake IPs</span>
  <span class="c"># i.e. questions to these domain names will always be answered with their</span>
  <span class="c"># real IP addresses</span>
  <span class="c"># fake-ip-filter:</span>
  <span class="c">#   - '*.lan'</span>
  <span class="c">#   - localhost.ptlogin2.qq.com</span>

  <span class="c"># Supports UDP, TCP, DoT, DoH. You can specify the port to connect to.</span>
  <span class="c"># All DNS questions are sent directly to the nameserver, without proxies</span>
  <span class="c"># involved. Clash answers the DNS question with the first result gathered.</span>
  nameserver:
    - 114.114.114.114 <span class="c"># default value</span>
    - 8.8.8.8 <span class="c"># default value</span>
    - tls://dns.rubyfish.cn:853 <span class="c"># DNS over TLS</span>
    - https://1.1.1.1/dns-query <span class="c"># DNS over HTTPS</span>
    - dhcp://en0 <span class="c"># dns from dhcp</span>

  <span class="c"># When `fallback` is present, the DNS server will send concurrent requests</span>
  <span class="c"># to the servers in this section along with servers in `nameservers`.</span>
  <span class="c"># The answers from fallback servers are used when the GEOIP country</span>
  <span class="c"># is not `CN`.</span>
  <span class="c"># fallback:</span>
  <span class="c">#   - tcp://1.1.1.1</span>

  <span class="c"># If IP addresses resolved with servers in `nameservers` are in the specified</span>
  <span class="c"># subnets below, they are considered invalid and results from `fallback`</span>
  <span class="c"># servers are used instead.</span>
  <span class="c">#</span>
  <span class="c"># IP address resolved with servers in `nameserver` is used when</span>
  <span class="c"># `fallback-filter.geoip` is true and when GEOIP of the IP address is `CN`.</span>
  <span class="c">#</span>
  <span class="c"># If `fallback-filter.geoip` is false, results from `nameserver` nameservers</span>
  <span class="c"># are always used if not match `fallback-filter.ipcidr`.</span>
  <span class="c">#</span>
  <span class="c"># This is a countermeasure against DNS pollution attacks.</span>
  <span class="c"># fallback-filter:</span>
  <span class="c">#   geoip: true</span>
  <span class="c">#   geoip-code: CN</span>
  <span class="c">#   ipcidr:</span>
  <span class="c">#     - 240.0.0.0/4</span>
  <span class="c">#   domain:</span>
  <span class="c">#     - '+.google.com'</span>
  <span class="c">#     - '+.facebook.com'</span>
  <span class="c">#     - '+.youtube.com'</span>

  <span class="c"># Lookup domains via specific nameservers</span>
  <span class="c"># nameserver-policy:</span>
  <span class="c">#   'www.baidu.com': '114.114.114.114'</span>
  <span class="c">#   '+.internal.crop.com': '10.0.0.1'</span>
proxies:
<span class="c"># 代理服务器配置，更多的代理设置请查看：https://lancellc.gitbook.io/clash/clash-config-file/an-example-configuration-file</span>
  - name: <span class="s2">"local-socks5"</span>
    <span class="nb">type</span>: socks5
    server: localhost
    port: 1080

proxy-groups:
  <span class="c"># 组策略</span>
  <span class="c"># url-test 自动选择最快的节点进行访问.</span>
  - name: <span class="s2">"auto"</span>   <span class="c">#策略名</span>
    <span class="nb">type</span>: url-test
    proxies:
      - local-socks5
    <span class="c"># tolerance: 150</span>
    url: <span class="s1">'http://www.gstatic.com/generate_204'</span>
    interval: 300

rules:
<span class="c"># 规则策略</span>
<span class="c"># 当一级域名是 google.com 时使用 auto 策略</span>
  - DOMAIN-SUFFIX,google.com,auto
  - DOMAIN-SUFFIX,github.com,auto
  - DOMAIN-SUFFIX,github.io,auto
  - DOMAIN-SUFFIX,gitee.com,DIRECT
  - DOMAIN-SUFFIX,emacs-china.org,DIRECT
  - DOMAIN-SUFFIX,ruby-china.org,DIRECT
  - DOMAIN-SUFFIX,baidu.com,DIRECT
<span class="c"># 当域名含有关键词 google 时使用 auto</span>
  - DOMAIN-KEYWORD,google,auto
  - DOMAIN,google.com,auto
<span class="c"># 当一级域名是 ad.com 时拒绝访问，可以用于屏蔽广告</span>
  - DOMAIN-SUFFIX,ad.com,REJECT
<span class="c"># 内网服务 ip 不走代理</span>
  - SRC-IP-CIDR,192.168.1.0/32,DIRECT
  - SRC-IP-CIDR,10.0.0.0/8,DIRECT
<span class="c"># 可选参数 "no-resolve" ，基于 IP 的规则 (GEOIP, IP-CIDR, IP-CIDR6)</span>
  - IP-CIDR,127.0.0.0/8,DIRECT
  - GEOIP,CN,DIRECT
<span class="c"># 目标端口是 8888 时，直接访问不走代理</span>
  - SRC-PORT,8888,DIRECT
<span class="c"># 默认规则</span>
  - MATCH,auto
</code></pre></div></div>

<p>接着运行命令 <code class="language-plaintext highlighter-rouge">clash -f config.yml</code> 来启动 Clash，Clash 会对外暴露一个 http 类型的 18080 端口代理。</p>
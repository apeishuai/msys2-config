<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="瓦片地图">瓦片地图</h2><h3 id="简介">简介</h3><p>瓦片地图金字塔模型是一种多分辨率层次模型，从瓦片金字塔的底层到顶层，分辨率越来越低，但表示的地理范围不变。</p><h3 id="使用场景">使用场景</h3><h4 id="在地图上叠加热力图">在地图上叠加热力图</h4><p>首先可以用如下函数进行坐标和瓦片的互相转化：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> math<br><br>TILE_SIZE = <span class="hljs-number">256</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">lon_to_pixel_x</span>(<span class="hljs-params">lon, zoom</span>):<br>    pixel_x = (lon + <span class="hljs-number">180</span>) / <span class="hljs-number">360</span> * (TILE_SIZE &lt;&lt; zoom)<br>    <span class="hljs-keyword">return</span> pixel_x<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">lat_to_pixel_y</span>(<span class="hljs-params">lat, zoom</span>):<br>    sin_lat = math.sin(lat * math.pi / <span class="hljs-number">180</span>)<br>    <span class="hljs-keyword">return</span> (<span class="hljs-number">0.5</span> - math.log((<span class="hljs-number">1</span> + sin_lat) / (<span class="hljs-number">1</span> - sin_lat)) / (<span class="hljs-number">4</span> * math.pi)) * (TILE_SIZE &lt;&lt; zoom)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">lat_lon_to_tile</span>(<span class="hljs-params">lon, lat, zoom</span>):<br>    px = lon_to_pixel_x(lon, zoom)<br>    py = lat_to_pixel_y(lat, zoom)<br>    tx = <span class="hljs-built_in">int</span>(px / TILE_SIZE)<br>    ty = <span class="hljs-built_in">int</span>(py / TILE_SIZE)<br>    <span class="hljs-keyword">return</span> tx, ty<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">tile_to_latlon</span>(<span class="hljs-params">x, y, z</span>):<br>    n = <span class="hljs-number">2.0</span> ** z<br>    lon_left = x / n * <span class="hljs-number">360.0</span> - <span class="hljs-number">180.0</span><br>    lat_rad = math.atan(math.sinh(math.pi * (<span class="hljs-number">1</span> - <span class="hljs-number">2</span> * y / n)))<br>    lat_top = math.degrees(lat_rad)<br><br>    lon_right = (x + <span class="hljs-number">1</span>) / n * <span class="hljs-number">360.0</span> - <span class="hljs-number">180.0</span><br>    lat_rad = math.atan(math.sinh(math.pi * (<span class="hljs-number">1</span> - <span class="hljs-number">2</span> * (y + <span class="hljs-number">1</span>) / n)))<br>    lat_bottom = math.degrees(lat_rad)<br><br>    <span class="hljs-keyword">return</span> lat_top, lon_left, lat_bottom, lon_right<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    <span class="hljs-built_in">print</span>(tile_to_latlon(<span class="hljs-number">14</span>, <span class="hljs-number">6</span>, <span class="hljs-number">4</span>))<br>    <span class="hljs-built_in">print</span>(lat_lon_to_tile(<span class="hljs-number">135</span>, <span class="hljs-number">40.97</span>, <span class="hljs-number">4</span>))<br></code></pre></td></tr></table></figure><p>然后还可以使用如下代码的生成瓦片：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">interpolate_color</span>(<span class="hljs-params">config: <span class="hljs-built_in">list</span>, value: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">tuple</span>:<br>    <span class="hljs-keyword">if</span> value <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span><br>    lower_entry = <span class="hljs-literal">None</span><br>    higher_entry = <span class="hljs-literal">None</span><br>    <span class="hljs-keyword">for</span> entry <span class="hljs-keyword">in</span> config:<br>        <span class="hljs-keyword">if</span> entry[<span class="hljs-number">0</span>] &lt;= value:<br>            lower_entry = entry<br>        <span class="hljs-keyword">if</span> entry[<span class="hljs-number">0</span>] &gt;= value:<br>            higher_entry = entry<br>            <span class="hljs-keyword">break</span><br><br>    <span class="hljs-keyword">if</span> lower_entry <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">tuple</span>(higher_entry[<span class="hljs-number">1</span>])<br>    <span class="hljs-keyword">elif</span> higher_entry <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">tuple</span>(lower_entry[<span class="hljs-number">1</span>])<br><br>    check = (higher_entry[<span class="hljs-number">0</span>] - lower_entry[<span class="hljs-number">0</span>])<br>    <span class="hljs-keyword">if</span> check == <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">return</span> lower_entry[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>], lower_entry[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>], lower_entry[<span class="hljs-number">1</span>][<span class="hljs-number">2</span>], <span class="hljs-number">255</span><br>    <span class="hljs-keyword">else</span>:<br>        ratio = (value - lower_entry[<span class="hljs-number">0</span>]) / (higher_entry[<span class="hljs-number">0</span>] - lower_entry[<span class="hljs-number">0</span>])<br>    result = interpolate_color_between(lower_entry[<span class="hljs-number">1</span>], higher_entry[<span class="hljs-number">1</span>], ratio)<br>    <span class="hljs-keyword">return</span> result<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">interpolate_color_between</span>(<span class="hljs-params">color1: <span class="hljs-built_in">tuple</span>, color2: <span class="hljs-built_in">tuple</span>, ratio: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">tuple</span>:<br>    r1, g1, b1 = color1<br>    r2, g2, b2 = color2<br><br>    r = <span class="hljs-built_in">int</span>(r1 + (r2 - r1) * ratio)<br>    g = <span class="hljs-built_in">int</span>(g1 + (g2 - g1) * ratio)<br>    b = <span class="hljs-built_in">int</span>(b1 + (b2 - b1) * ratio)<br>    a = <span class="hljs-number">255</span><br>    <span class="hljs-keyword">return</span> r, g, b, a<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">draw_image</span>(<span class="hljs-params">rgba_array: <span class="hljs-built_in">list</span>, width: <span class="hljs-built_in">int</span>, height: <span class="hljs-built_in">int</span></span>) -&gt; Image:<br>    image = Image.new(<span class="hljs-string">&quot;RGBA&quot;</span>, (width, height))<br>    image.putdata(rgba_array)<br>    <span class="hljs-keyword">return</span> image<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_rgba_list</span>(<span class="hljs-params">data: <span class="hljs-built_in">list</span>, config: <span class="hljs-built_in">dict</span></span>) -&gt; <span class="hljs-built_in">list</span>:<br>    cache = []<br>    <span class="hljs-keyword">for</span> d <span class="hljs-keyword">in</span> data:<br>        cache.append(interpolate_color(config, d))<br>    <span class="hljs-keyword">return</span> cache<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">fake_data_generator</span>(<span class="hljs-params">x: <span class="hljs-built_in">int</span>, y: <span class="hljs-built_in">int</span>, value: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">list</span>:<br>    cache = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(x * y):<br>        cache.append(value)<br>    <span class="hljs-keyword">return</span> cache;<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    x = <span class="hljs-number">45</span><br>    y = <span class="hljs-number">45</span><br>    data = fake_data_generator(<span class="hljs-number">45</span>, <span class="hljs-number">45</span>, <span class="hljs-number">305</span>)<br><br>    config = [<br>        [<span class="hljs-number">193</span>, [<span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">255</span>]],<br>        [<span class="hljs-number">215</span>, [<span class="hljs-number">237</span>, <span class="hljs-number">220</span>, <span class="hljs-number">237</span>]],<br>        [<span class="hljs-number">230</span>, [<span class="hljs-number">227</span>, <span class="hljs-number">204</span>, <span class="hljs-number">229</span>]],<br>        [<span class="hljs-number">245</span>, [<span class="hljs-number">206</span>, <span class="hljs-number">169</span>, <span class="hljs-number">212</span>]],<br>        [<span class="hljs-number">260</span>, [<span class="hljs-number">139</span>, <span class="hljs-number">97</span>, <span class="hljs-number">184</span>]],<br>        [<span class="hljs-number">275</span>, [<span class="hljs-number">51</span>, <span class="hljs-number">76</span>, <span class="hljs-number">160</span>]],<br>        [<span class="hljs-number">290</span>, [<span class="hljs-number">76</span>, <span class="hljs-number">159</span>, <span class="hljs-number">199</span>]],<br>        [<span class="hljs-number">305</span>, [<span class="hljs-number">211</span>, <span class="hljs-number">243</span>, <span class="hljs-number">149</span>]],<br>        [<span class="hljs-number">320</span>, [<span class="hljs-number">248</span>, <span class="hljs-number">144</span>, <span class="hljs-number">43</span>]],<br>        [<span class="hljs-number">335</span>, [<span class="hljs-number">148</span>, <span class="hljs-number">21</span>, <span class="hljs-number">50</span>]],<br>        [<span class="hljs-number">350</span>, [<span class="hljs-number">44</span>, <span class="hljs-number">0</span>, <span class="hljs-number">15</span>]],<br>    ]<br>    rgba_list = get_rgba_list(data, config)<br>    img = draw_image(rgba_list, y, x).resize((<span class="hljs-number">256</span>, <span class="hljs-number">256</span>))<br>    img.save(<span class="hljs-string">&quot;tile.webp&quot;</span>, <span class="hljs-string">&quot;WEBP&quot;</span>)<br></code></pre></td></tr></table></figure>
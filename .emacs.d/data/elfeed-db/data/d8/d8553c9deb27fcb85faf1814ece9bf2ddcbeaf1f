<p>国庆节搞了一个活，利用 wasmtime 来执行编译成 WASM/WASI 字节码的 CPython 虚拟机，并在宿主机一侧利用 Python 实现的 Host Function 来扩展它。</p><p>再次声明一下，这个只是我个人想搞的活，没有再任何生产环境中得到验证，just for fun（XDDD</p><span id="more"></span><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>首先我们简单介绍一下 WASM/WASI，这里我直接引用一下 AI 生成的 brief summary</p><blockquote><p>WebAssembly (WASM) 是一种低级编程语言,可在现代网页浏览器中运行。它提供接近原生的性能。<br>WebAssembly System Interface (WASI) 是 WASM 的一个标准扩展,允许 WASM 程序在浏览器外运行,访问系统资源。<br>这两项技术旨在提高 Web 应用性能,并使 WASM 在更多环境中可用。</p></blockquote><p>而 WASM/WASI 技术路线核心的优势在于</p><ol><li>跨平台的兼容性</li><li>多语言通过静态编译的支持</li><li>Native Sandbox 带来的安全性</li></ol><p>所以 WASM/WASI 不仅在浏览器得到了广泛的应用， 现在其应用也逐渐扩展到了服务端。Serverless Compute，Database UDF， Gateway Plugin 等场景都在逐渐的铺开。</p><p>在最近在梳理 CPython 代码的时候，我突然有了一个想法，就是如果我用 WASM/WASI Runtime 来运行 CPython，然后在宿主机一侧利用 Python 实现的 Host Function 来扩展它，这样似乎能对一些比如允许用户上传自定义代码的数据 PaaS 这样的场景有所帮助。当然更主要的原因是这个 idea 貌似很好玩。</p><p>在我们继续往下走之前，我们感谢一个人，Brett Cannon， 他几乎以一己之力，完成了 CPython WASM/WASI 的支持。快跟我说 谢谢 Brett Cannon ！</p><p>CPython 整体的 WASM/WASI 演进路线如下</p><ol><li>最早于21年11月，通过 emscripten 支持了 WASM，参见 BPO-40280<a href="#refer-anchor-1"><sup>1</sup></a></li><li>在2023年6月成为官方支持的 Tier3 平台（或者更早?）</li><li>在2024年3月，成为官方支持的 Tier2 平台，参见 GH-116314<a href="#refer-anchor-2"><sup>2</sup></a></li><li>从 Python 3.13 开始，传统的 emscripten 方式的 WASM/WASI 支持将被放弃</li></ol><p>OK，那么我们先来将 CPython 编译为 WASM/WASI 字节码，这里需要提前 setup 你的环境，确保安装 WASI-SDK。这里我为了省事，直接使用官方提供的 devcontainer 来进行所有的操作</p><p>我们使用 vscode setup 好 devcontainer 后，我们执行 <code>python3 Tools/wasm/wasi.py build -- --config-cache --with-pydebug</code> 便可以编译了，这里为了省事，我将原本 wasi.py 设定的先提前预编译一遍 CPython 的部分给去除了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">build_all</span>(<span class="params">context</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Build everything.&quot;&quot;&quot;</span></span><br><span class="line">    steps = [</span><br><span class="line">            <span class="comment">#configure_build_python,</span></span><br><span class="line">            <span class="comment">#make_build_python,</span></span><br><span class="line">            configure_wasi_python,</span><br><span class="line">            make_wasi_python</span><br><span class="line">        ]</span><br></pre></td></tr></table></figure><p>在编译完成后，我们使用 <code>cross-build/wasm32-wasi/python.sh</code> 就可以运行我们的 CPython 了，这里实际上是 wrap 了一下 WASMTIME 的命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="built_in">exec</span> /usr/local/bin/wasmtime run --wasm max-wasm-stack=16777216 --wasi preview2 --<span class="built_in">dir</span> /workspaces/cpython-wasi::/ --<span class="built_in">env</span> PYTHONPATH=/cross-build/wasm32-wasi/build/lib.wasi-wasm32-3.14-pydebug /workspaces/cpython-wasi/cross-build/wasm32-wasi/python.wasm <span class="string">&quot;<span class="variable">$@</span>&quot;</span></span><br></pre></td></tr></table></figure><p>这里我们可以看到，官方的推荐的 WASM/WASI Runtime 是 wasmtime，那么我们用 wasmtime 进行接下来的工作</p><p>由于我们后续想用 Host Function 来扩展这一套流程，所以我们将 bash 的部分重写一下，最开始我使用的是 wasmtime 的 Python binding，大致的代码如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> wasmtime <span class="keyword">import</span> Linker, Engine, Store, WasiConfig, Module, FuncType, ValType, _bindings, Config</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_wasi</span>():</span><br><span class="line">    linker = Linker(Engine())</span><br><span class="line">    linker.define_wasi()</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;/workspaces/cpython-wasi/cross-build/wasm32-wasi/python.wasm&quot;</span>, <span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">        module = Module(linker.engine, file.read())</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">foor_bar</span>(<span class="params">a, b</span>):</span><br><span class="line">        <span class="keyword">return</span> a + b</span><br><span class="line">    linker.define_func(<span class="string">&quot;demo&quot;</span>, <span class="string">&quot;demo&quot;</span>, FuncType([ValType.i32(),ValType.i32()],[ValType.i32()]), foor_bar)</span><br><span class="line">    store = Store(linker.engine)</span><br><span class="line">    config = Config()</span><br><span class="line">    _bindings.wasmtime_config_max_wasm_stack_set(config.ptr(), <span class="number">16777216</span>)</span><br><span class="line">    wasi_config = WasiConfig()</span><br><span class="line">    <span class="comment"># wasi_config.stdin_file = sys.stdin.fileno()</span></span><br><span class="line">    <span class="comment"># wasi_config.stdout_file = sys.stdout.fileno()</span></span><br><span class="line">    <span class="comment"># wasi_config.stderr_file = sys.stderr.fileno()</span></span><br><span class="line">    wasi_config.env = [[<span class="string">&quot;PYTHONPATH&quot;</span>, <span class="string">&quot;/cross-build/wasm32-wasi/build/lib.wasi-wasm32-3.14-pydebug&quot;</span>]]</span><br><span class="line">    wasi_config.inherit_stdout()</span><br><span class="line">    wasi_config.inherit_stderr()</span><br><span class="line">    wasi_config.inherit_stdin()</span><br><span class="line">    wasi_config.preopen_dir(<span class="string">&quot;/workspaces/cpython-wasi&quot;</span>,<span class="string">&quot;/&quot;</span>)</span><br><span class="line">    store.set_wasi(wasi_config)</span><br><span class="line"></span><br><span class="line">    instance=linker.instantiate(store, module)</span><br><span class="line">    instance.exports(store)[<span class="string">&quot;_start&quot;</span>](store)</span><br><span class="line"></span><br><span class="line">test_wasi()</span><br></pre></td></tr></table></figure><p>由于 wasmtime 的 Python binding 是直接走 ctype 的一套封装，很多 config 选项没有在对外暴露的 API 里（比如代码里使用的 wasmtime_config_max_wasm_stack_set 来处理 WASM 的 stack），导致很多操作需要使用没暴露的私有 API，太过于 tricky，所以我选择重新用 Rust 来实现这一套操作</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> wasmtime::*;</span><br><span class="line"><span class="keyword">use</span> wasmtime_wasi::preview1::&#123;<span class="keyword">self</span>&#125;;</span><br><span class="line"><span class="keyword">use</span> wasmtime_wasi::WasiCtxBuilder;</span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">config</span> = Config::<span class="title function_ invoke__">new</span>();</span><br><span class="line">    config.<span class="title function_ invoke__">max_wasm_stack</span>(<span class="number">16777216</span>);</span><br><span class="line">    <span class="keyword">match</span> Engine::<span class="title function_ invoke__">new</span>(&amp;config) &#123;</span><br><span class="line">        <span class="title function_ invoke__">Ok</span>(engine) =&gt; &#123;</span><br><span class="line">            <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">linker</span> = Linker::<span class="title function_ invoke__">new</span>(&amp;engine);</span><br><span class="line">            preview1::<span class="title function_ invoke__">add_to_linker_sync</span>(&amp;<span class="keyword">mut</span> linker, |t| t).<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line">            linker.<span class="title function_ invoke__">allow_unknown_exports</span>(<span class="literal">true</span>);</span><br><span class="line">            <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">builder</span> = WasiCtxBuilder::<span class="title function_ invoke__">new</span>();</span><br><span class="line">            builder.<span class="title function_ invoke__">inherit_stdio</span>();</span><br><span class="line">            builder.<span class="title function_ invoke__">env</span>(</span><br><span class="line">                <span class="string">&quot;PYTHONPATH&quot;</span>,</span><br><span class="line">                <span class="string">&quot;/cross-build/wasm32-wasi/build/lib.wasi-wasm32-3.14-pydebug&quot;</span>,</span><br><span class="line">            );</span><br><span class="line">            builder</span><br><span class="line">                .<span class="title function_ invoke__">preopened_dir</span>(</span><br><span class="line">                    <span class="string">&quot;/workspaces/cpython-wasi&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;/&quot;</span>,</span><br><span class="line">                    wasmtime_wasi::DirPerms::<span class="title function_ invoke__">all</span>(),</span><br><span class="line">                    wasmtime_wasi::FilePerms::<span class="title function_ invoke__">all</span>(),</span><br><span class="line">                )</span><br><span class="line">                .<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line">            builder.<span class="title function_ invoke__">args</span>(&amp;[<span class="string">&quot;--&quot;</span>, <span class="string">&quot;--version&quot;</span>]);</span><br><span class="line">            <span class="keyword">let</span> <span class="variable">wasi_ctx</span> = builder.<span class="title function_ invoke__">build_p1</span>();</span><br><span class="line">            <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">store</span> = Store::<span class="title function_ invoke__">new</span>(&amp;engine, wasi_ctx);</span><br><span class="line">            <span class="keyword">let</span> <span class="variable">module</span> = Module::<span class="title function_ invoke__">from_file</span>(</span><br><span class="line">                &amp;engine,</span><br><span class="line">                <span class="string">&quot;/workspaces/cpython-wasi/cross-build/wasm32-wasi/python.wasm&quot;</span>,</span><br><span class="line">            )</span><br><span class="line">            .<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line">            <span class="keyword">let</span> <span class="variable">instance</span> = linker.<span class="title function_ invoke__">instantiate</span>(&amp;<span class="keyword">mut</span> store, &amp;module).<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line">            <span class="keyword">let</span> <span class="variable">run</span> = instance</span><br><span class="line">                .get_typed_func::&lt;(), ()&gt;(&amp;<span class="keyword">mut</span> store, <span class="string">&quot;_start&quot;</span>)</span><br><span class="line">                .<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line">            run.<span class="title function_ invoke__">call</span>(&amp;<span class="keyword">mut</span> store, ()).<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_ invoke__">Err</span>(e) =&gt; &#123;</span><br><span class="line">            <span class="built_in">println!</span>(<span class="string">&quot;Error creating engine: &#123;:?&#125;&quot;</span>, e);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后我们执行代码，成功！</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@267e91be24fd wasmtime-demo]<span class="comment"># cargo run --release</span></span><br><span class="line">   Compiling wasmtime-demo v0.1.0 (/workspaces/wasmtime-demo)</span><br><span class="line">    Finished `release` profile [optimized] target(s) <span class="keyword">in</span> 1.81s</span><br><span class="line">     Running `target/release/wasmtime-demo`</span><br><span class="line">Python 3.14.0a0</span><br></pre></td></tr></table></figure><p>现在我们来扩展我们的 CPython。首先声明，由于 dlopen 在 WASM/WASI for CPython 中没有得到支持，所以我们需要更改 Python 的本体部分</p><p>首先，我们在 Python 的 Modules 目录下面新增一个文件，命名为 <code>demo.c</code>，内容如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Python.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="type">int</span> <span class="title function_">demo</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">static</span> PyObject *</span><br><span class="line"><span class="title function_">foo_bar</span><span class="params">(PyObject *self, PyObject *args)</span></span><br><span class="line">&#123;</span><br><span class="line">Py_INCREF(PyExc_TypeError);</span><br><span class="line"><span class="keyword">return</span> PyLong_FromLong((<span class="type">long</span>) demo(<span class="number">1</span>, <span class="number">2</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> PyMethodDef foomethods[] = &#123;</span><br><span class="line">&#123;<span class="string">&quot;bar&quot;</span>, foo_bar, METH_VARARGS, <span class="string">&quot;&quot;</span>&#125;,</span><br><span class="line">&#123;<span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="literal">NULL</span>&#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> PyModuleDef foomodule = &#123;</span><br><span class="line">PyModuleDef_HEAD_INIT,</span><br><span class="line">.m_name = <span class="string">&quot;demo&quot;</span>,</span><br><span class="line">.m_doc = <span class="string">&quot;foo test module&quot;</span>,</span><br><span class="line">.m_size = <span class="number">-1</span>,</span><br><span class="line">.m_methods = foomethods,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">PyMODINIT_FUNC</span><br><span class="line"><span class="title function_">PyInit_demo</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> PyModule_Create(&amp;foomodule);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后我们在 <code>Modules/Setup.bootstrap.in</code> 中加入一行</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">demo demo.c</span><br></pre></td></tr></table></figure><p>接着重新执行命令 <code>python3 Tools/wasm/wasi.py build -- --config-cache --with-pydebug</code>，生成新的 WASM/WASI 字节码。接着我们将前面的 Rust 代码中，args 的部分改为 <code>[&quot;--&quot;, &quot;-c&quot;, &quot;import demo; print(demo.bar())&quot;]</code>，然后重新执行代码，成功！</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@267e91be24fd wasmtime-demo]<span class="comment"># cargo run --release</span></span><br><span class="line">   Compiling wasmtime-demo v0.1.0 (/workspaces/wasmtime-demo)</span><br><span class="line">    Finished `release` profile [optimized] target(s) <span class="keyword">in</span> 1.73s</span><br><span class="line">     Running `target/release/wasmtime-demo`</span><br><span class="line">3</span><br></pre></td></tr></table></figure><p>现在，我们有了一个扩展模块，demo.c，但是问题是，我们现在的 demo.c 中核心的 <code>demo</code> 函数是 hardcode 在代码中。那么我们需要处理一下这里</p><p>通常来说，在常规的经验下，我们可以将函数的实现和定义分离开，这样方便动态链接。WASM/WASI 的也是类似，不过需要额外的处理</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="type">int</span> <span class="title function_">demo</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> __<span class="title function_">attribute__</span><span class="params">((</span></span><br><span class="line"><span class="params">    __import_module__(<span class="string">&quot;demo&quot;</span>),</span></span><br><span class="line"><span class="params">    __import_name__(<span class="string">&quot;demo&quot;</span>),</span></span><br><span class="line"><span class="params">))</span>;</span><br></pre></td></tr></table></figure><p>这里我们是通过扩展的宏定义，在编译期的时候告诉编译器，demo 函数是从 demo 模块中导入的。这样我们就可以在后续的 Host Function 中，根据约定进行扩展了</p><p>然后我们需要修改一下 CPython 的编译脚本，给编译参数添加上 <code>-Wextra -Wl,--allow-undefined</code></p><p>接着重新执行 <code>python3 Tools/wasm/wasi.py build -- --config-cache --with-pydebug</code>，生成新的 WASM/WASI 字节码。这个时候我们可以先执行 <code>python.sh</code> 一下，我们会得到报错</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Error: failed to run main module `/workspaces/cpython-wasi/cross-build/wasm32-wasi/python.wasm`</span><br><span class="line"></span><br><span class="line">Caused by:</span><br><span class="line">    0: failed to instantiate <span class="string">&quot;/workspaces/cpython-wasi/cross-build/wasm32-wasi/python.wasm&quot;</span></span><br><span class="line">    1: unknown import: `demo::demo` has not been defined</span><br></pre></td></tr></table></figure><p>符合预期。</p><p>那么我们现在来重新处理下我们的 Rust 代码</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> wasmtime::*;</span><br><span class="line"><span class="keyword">use</span> wasmtime_wasi::preview1::&#123;<span class="keyword">self</span>&#125;;</span><br><span class="line"><span class="keyword">use</span> wasmtime_wasi::WasiCtxBuilder;</span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">config</span> = Config::<span class="title function_ invoke__">new</span>();</span><br><span class="line">    config.<span class="title function_ invoke__">max_wasm_stack</span>(<span class="number">16777216</span>);</span><br><span class="line">    <span class="keyword">match</span> Engine::<span class="title function_ invoke__">new</span>(&amp;config) &#123;</span><br><span class="line">        <span class="title function_ invoke__">Ok</span>(engine) =&gt; &#123;</span><br><span class="line">            <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">linker</span> = Linker::<span class="title function_ invoke__">new</span>(&amp;engine);</span><br><span class="line">            preview1::<span class="title function_ invoke__">add_to_linker_sync</span>(&amp;<span class="keyword">mut</span> linker, |t| t).<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line">            linker</span><br><span class="line">                .<span class="title function_ invoke__">func_wrap</span>(<span class="string">&quot;demo&quot;</span>, <span class="string">&quot;demo&quot;</span>, |a: <span class="type">i32</span>, b: <span class="type">i32</span>| &#123;</span><br><span class="line">                    (a+b)*<span class="number">10</span></span><br><span class="line">                &#125;)</span><br><span class="line">                .<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line">            linker.<span class="title function_ invoke__">allow_unknown_exports</span>(<span class="literal">true</span>);</span><br><span class="line">            <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">builder</span> = WasiCtxBuilder::<span class="title function_ invoke__">new</span>();</span><br><span class="line">            builder.<span class="title function_ invoke__">inherit_stdio</span>();</span><br><span class="line">            builder.<span class="title function_ invoke__">env</span>(</span><br><span class="line">                <span class="string">&quot;PYTHONPATH&quot;</span>,</span><br><span class="line">                <span class="string">&quot;/cross-build/wasm32-wasi/build/lib.wasi-wasm32-3.14-pydebug&quot;</span>,</span><br><span class="line">            );</span><br><span class="line">            builder</span><br><span class="line">                .<span class="title function_ invoke__">preopened_dir</span>(</span><br><span class="line">                    <span class="string">&quot;/workspaces/cpython-wasi&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;/&quot;</span>,</span><br><span class="line">                    wasmtime_wasi::DirPerms::<span class="title function_ invoke__">all</span>(),</span><br><span class="line">                    wasmtime_wasi::FilePerms::<span class="title function_ invoke__">all</span>(),</span><br><span class="line">                )</span><br><span class="line">                .<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line">            builder.<span class="title function_ invoke__">args</span>(&amp;[<span class="string">&quot;--&quot;</span>, <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;import demo; print(demo.bar())&quot;</span>]);</span><br><span class="line">            <span class="keyword">let</span> <span class="variable">wasi_ctx</span> = builder.<span class="title function_ invoke__">build_p1</span>();</span><br><span class="line">            <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">store</span> = Store::<span class="title function_ invoke__">new</span>(&amp;engine, wasi_ctx);</span><br><span class="line">            <span class="keyword">let</span> <span class="variable">module</span> = Module::<span class="title function_ invoke__">from_file</span>(</span><br><span class="line">                &amp;engine,</span><br><span class="line">                <span class="string">&quot;/workspaces/cpython-wasi/cross-build/wasm32-wasi/python.wasm&quot;</span>,</span><br><span class="line">            )</span><br><span class="line">            .<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line">            <span class="keyword">let</span> <span class="variable">instance</span> = linker.<span class="title function_ invoke__">instantiate</span>(&amp;<span class="keyword">mut</span> store, &amp;module).<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line">            <span class="keyword">let</span> <span class="variable">run</span> = instance</span><br><span class="line">                .get_typed_func::&lt;(), ()&gt;(&amp;<span class="keyword">mut</span> store, <span class="string">&quot;_start&quot;</span>)</span><br><span class="line">                .<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line">            run.<span class="title function_ invoke__">call</span>(&amp;<span class="keyword">mut</span> store, ()).<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_ invoke__">Err</span>(e) =&gt; &#123;</span><br><span class="line">            <span class="built_in">println!</span>(<span class="string">&quot;Error creating engine: &#123;:?&#125;&quot;</span>, e);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行一下，得到结果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@267e91be24fd wasmtime-demo]<span class="comment"># cargo run --release</span></span><br><span class="line">   Compiling wasmtime-demo v0.1.0 (/workspaces/wasmtime-demo)</span><br><span class="line">    Finished `release` profile [optimized] target(s) <span class="keyword">in</span> 1.79s</span><br><span class="line">     Running `target/release/wasmtime-demo`</span><br><span class="line">30</span><br></pre></td></tr></table></figure><p>符合预期。</p><p>好了，现在我们支持了 Host Fucntion，我们可以在遵守函数签名的情况下，任意修改我们的逻辑。但是你还记得本文的标题吗？我们想执行 Python 实现的 Host Function。emmmm 虽然有一点绕，但也不是不可以，我们直接祭出 PyO3，更改 Rust 代码如下</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> pyo3::prelude::*;</span><br><span class="line"><span class="keyword">use</span> pyo3::types::PyTuple;</span><br><span class="line"><span class="keyword">use</span> wasmtime::*;</span><br><span class="line"><span class="keyword">use</span> wasmtime_wasi::preview1::&#123;<span class="keyword">self</span>&#125;;</span><br><span class="line"><span class="keyword">use</span> wasmtime_wasi::WasiCtxBuilder;</span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">config</span> = Config::<span class="title function_ invoke__">new</span>();</span><br><span class="line">    config.<span class="title function_ invoke__">max_wasm_stack</span>(<span class="number">16777216</span>);</span><br><span class="line">    <span class="keyword">match</span> Engine::<span class="title function_ invoke__">new</span>(&amp;config) &#123;</span><br><span class="line">        <span class="title function_ invoke__">Ok</span>(engine) =&gt; &#123;</span><br><span class="line">            <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">linker</span> = Linker::<span class="title function_ invoke__">new</span>(&amp;engine);</span><br><span class="line">            preview1::<span class="title function_ invoke__">add_to_linker_sync</span>(&amp;<span class="keyword">mut</span> linker, |t| t).<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line">            linker</span><br><span class="line">                .<span class="title function_ invoke__">func_wrap</span>(<span class="string">&quot;demo&quot;</span>, <span class="string">&quot;demo&quot;</span>, |a: <span class="type">i32</span>, b: <span class="type">i32</span>| &#123;</span><br><span class="line">                    Python::<span class="title function_ invoke__">with_gil</span>(|py| &#123;</span><br><span class="line">                        <span class="keyword">let</span> <span class="variable">fun</span>: Py&lt;PyAny&gt; = PyModule::<span class="title function_ invoke__">from_code_bound</span>(</span><br><span class="line">                            py,</span><br><span class="line">                            <span class="string">&quot;def example(*args, **kwargs):</span></span><br><span class="line"><span class="string">                                return (args[0] + args[1])*11&quot;</span>,</span><br><span class="line">                            <span class="string">&quot;&quot;</span>,</span><br><span class="line">                            <span class="string">&quot;&quot;</span>,</span><br><span class="line">                        )</span><br><span class="line">                        .<span class="title function_ invoke__">unwrap</span>()</span><br><span class="line">                        .<span class="title function_ invoke__">getattr</span>(<span class="string">&quot;example&quot;</span>)</span><br><span class="line">                        .<span class="title function_ invoke__">unwrap</span>()</span><br><span class="line">                        .<span class="title function_ invoke__">into</span>();</span><br><span class="line">                        <span class="keyword">let</span> <span class="variable">args</span> = PyTuple::<span class="title function_ invoke__">new_bound</span>(py, &amp;[a, b]);</span><br><span class="line">                        <span class="comment">// cast following to int</span></span><br><span class="line"></span><br><span class="line">                        fun.<span class="title function_ invoke__">call1</span>(py, args).<span class="title function_ invoke__">unwrap</span>().extract::&lt;<span class="type">i32</span>&gt;(py).<span class="title function_ invoke__">unwrap</span>()</span><br><span class="line">                    &#125;)</span><br><span class="line">                &#125;)</span><br><span class="line">                .<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line">            linker.<span class="title function_ invoke__">allow_unknown_exports</span>(<span class="literal">true</span>);</span><br><span class="line">            <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">builder</span> = WasiCtxBuilder::<span class="title function_ invoke__">new</span>();</span><br><span class="line">            builder.<span class="title function_ invoke__">inherit_stdio</span>();</span><br><span class="line">            builder.<span class="title function_ invoke__">env</span>(</span><br><span class="line">                <span class="string">&quot;PYTHONPATH&quot;</span>,</span><br><span class="line">                <span class="string">&quot;/cross-build/wasm32-wasi/build/lib.wasi-wasm32-3.14-pydebug&quot;</span>,</span><br><span class="line">            );</span><br><span class="line">            builder</span><br><span class="line">                .<span class="title function_ invoke__">preopened_dir</span>(</span><br><span class="line">                    <span class="string">&quot;/workspaces/cpython-wasi&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;/&quot;</span>,</span><br><span class="line">                    wasmtime_wasi::DirPerms::<span class="title function_ invoke__">all</span>(),</span><br><span class="line">                    wasmtime_wasi::FilePerms::<span class="title function_ invoke__">all</span>(),</span><br><span class="line">                )</span><br><span class="line">                .<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line">            builder.<span class="title function_ invoke__">args</span>(&amp;[<span class="string">&quot;--&quot;</span>, <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;import demo; print(demo.bar())&quot;</span>]);</span><br><span class="line">            <span class="keyword">let</span> <span class="variable">wasi_ctx</span> = builder.<span class="title function_ invoke__">build_p1</span>();</span><br><span class="line">            <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">store</span> = Store::<span class="title function_ invoke__">new</span>(&amp;engine, wasi_ctx);</span><br><span class="line">            <span class="keyword">let</span> <span class="variable">module</span> = Module::<span class="title function_ invoke__">from_file</span>(</span><br><span class="line">                &amp;engine,</span><br><span class="line">                <span class="string">&quot;/workspaces/cpython-wasi/cross-build/wasm32-wasi/python.wasm&quot;</span>,</span><br><span class="line">            )</span><br><span class="line">            .<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line">            <span class="keyword">let</span> <span class="variable">instance</span> = linker.<span class="title function_ invoke__">instantiate</span>(&amp;<span class="keyword">mut</span> store, &amp;module).<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line">            <span class="keyword">let</span> <span class="variable">run</span> = instance</span><br><span class="line">                .get_typed_func::&lt;(), ()&gt;(&amp;<span class="keyword">mut</span> store, <span class="string">&quot;_start&quot;</span>)</span><br><span class="line">                .<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line">            run.<span class="title function_ invoke__">call</span>(&amp;<span class="keyword">mut</span> store, ()).<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_ invoke__">Err</span>(e) =&gt; &#123;</span><br><span class="line">            <span class="built_in">println!</span>(<span class="string">&quot;Error creating engine: &#123;:?&#125;&quot;</span>, e);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后执行一下，得到结果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@267e91be24fd wasmtime-demo]<span class="comment"># cargo run --release</span></span><br><span class="line">   Compiling wasmtime-demo v0.1.0 (/workspaces/wasmtime-demo)</span><br><span class="line">    Finished `release` profile [optimized] target(s) <span class="keyword">in</span> 1.75s</span><br><span class="line">     Running `target/release/wasmtime-demo`</span><br><span class="line">33</span><br></pre></td></tr></table></figure><p>OK，我们成功了！</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文实际上是一个技术路线的 PoC，验证了特定情况下，将 Python 和 WASI 结合的可能性，但是目前也暴露出一些问题</p><ol><li>dlopen 支持的缺乏导致需要魔改 CPython runtime 本身的代码，不过根据 Brett Cannon 博客中提供的信息，有人 hack 了这一块代码提供了支持。感觉后续可以 follow up 一下</li><li>wasmtime Python binding 实在是太难用了，其实可以考虑直接基于 PyO3 进行一次封装</li><li>利用 Rust 来处理 wasmtime ，PyO3 调用 Python 代码目前存在的问题是 Python VM 对象没法跨线程共享，可能需要自己基于 Rust 封装一套类似 Golang 这样的 channel 的思路来复用虚拟机和传递数据</li></ol><p>不过总体来说，这个 PoC 还是很有意思的，希朋友们也能玩的开心</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><div id="refer-anchor-1"></div><ul><li>[1]. <a href="https://bugs.python.org/issue40280">https://bugs.python.org/issue40280</a></li></ul><div id="refer-anchor-2"></div><ul><li>[2]. <a href="https://github.com/python/cpython/issues/116314">https://github.com/python/cpython/issues/116314</a></li></ul>
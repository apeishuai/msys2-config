<p>Gevent 还是 asyncio 这一直是个经典的问题，在这里我们直接用数据来帮助大家做一下决策</p><span id="more"></span><h2 id="开篇"><a href="#开篇" class="headerlink" title="开篇"></a>开篇</h2><p>Lin Wei 老师珠玉在前</p><p><img src="https://i.imgur.com/Jk2ubDY.png" alt="HiRedis"></p><p>给出了 asyncio 和 Gevnet 的极限性能。 在这里我们看到了 asyncio 配合 uvloop 基本上是 Gevent 的 double 了</p><p>那么在在 Web 框架下是否如此呢？</p><p>我们来做一下实验吧</p><p>首先说一下负载机器的配置，这里我选用了 Azure 上 D8as_v5 的机器，该机器配置如下：</p><ol><li>8Core32G 的配置</li><li>底座硬件基于 EPYC 7763 系列处理器</li><li>共计4个节点，分配给 Django/Flast/FastAPI/Starlette 四个不同的框架</li></ol><p>我们压测框架选择 locust，同样基于 Kuberntes 集群，因为我账户的 D8as_v5 机器的 Quota 不太够，所以压测框架我们选了不同机器的混合部署</p><ol><li>4个 D8as_v5，共计 32 Core 算力</li><li>4个 D8as_v3，共计 32 Core 算力</li><li>4个 D4as_v2，共计 16 Core 算力</li></ol><p>我们测试的主要目的是模拟在生产环境下的吞吐，所以我选择的测试方式如下</p><ol><li>准备一台 16Core 64G 的 MySQL 实例，用于存储数据</li><li>创建一张表，随机写入100万数据</li><li>在框架代码中进行 SQL 查询，返回查询结果</li></ol><p>MySQL 表结构如下</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span>  if <span class="keyword">not</span> <span class="keyword">exists</span>  `demo_data`</span><br><span class="line">(</span><br><span class="line">    `id`          <span class="type">bigint</span>(<span class="number">20</span>)   <span class="keyword">not</span> <span class="keyword">null</span> auto_increment,</span><br><span class="line">    `name`        <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">    `create_time` <span class="type">timestamp</span> <span class="keyword">default</span> <span class="built_in">CURRENT_TIMESTAMP</span>,</span><br><span class="line">    `update_time` <span class="type">timestamp</span> <span class="keyword">default</span> <span class="built_in">CURRENT_TIMESTAMP</span>,</span><br><span class="line">    <span class="keyword">primary</span> key (`id`),</span><br><span class="line">    index (`name`)</span><br><span class="line">) charset <span class="operator">=</span> utf8mb4</span><br><span class="line">  engine <span class="operator">=</span> innodb;</span><br></pre></td></tr></table></figure><p>Django 代码如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.core <span class="keyword">import</span> serializers</span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> HttpResponse</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> DemoData</span><br><span class="line"></span><br><span class="line">TEMP = <span class="string">&quot;1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!@#$%^&amp;*()_+=-&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your views here.</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">demo_views</span>(<span class="params">request</span>):</span><br><span class="line">    result = DemoData.objects.<span class="built_in">filter</span>(</span><br><span class="line">        name=<span class="string">&quot;&quot;</span>.join(random.choices(TEMP, k=random.randrange(<span class="number">1</span>, <span class="number">254</span>)))</span><br><span class="line">    )</span><br><span class="line">    <span class="comment"># x = json.dumps(request.body)</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(</span><br><span class="line">        serializers.serialize(<span class="string">&quot;json&quot;</span>, result <span class="keyword">if</span> result <span class="keyword">else</span> []),</span><br><span class="line">        content_type=<span class="string">&quot;application/json&quot;</span>,</span><br><span class="line">    )</span><br></pre></td></tr></table></figure><p>Flask 代码如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> dataset</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, Response</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">DATABASE_URL = <span class="string">f&quot;mysql://<span class="subst">&#123;os.getenv(<span class="string">&#x27;DATABASE_USER&#x27;</span>)&#125;</span>:<span class="subst">&#123;os.getenv(<span class="string">&#x27;DATABASE_PASSWORD&#x27;</span>)&#125;</span>@<span class="subst">&#123;os.getenv(<span class="string">&#x27;DATABASE_HOST&#x27;</span>)&#125;</span>:3306/demo&quot;</span></span><br><span class="line">db = dataset.connect(DATABASE_URL, engine_kwargs=&#123;<span class="string">&quot;pool_size&quot;</span>: <span class="number">10000</span>&#125;)</span><br><span class="line"></span><br><span class="line">TEMP = <span class="string">&quot;1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!@#$%^&amp;*()_+=-&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/demo&quot;</span>, methods=[<span class="string">&quot;GET&quot;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">demo_code</span>():</span><br><span class="line">    <span class="keyword">return</span> Response(</span><br><span class="line">        response=json.dumps(</span><br><span class="line">            <span class="built_in">list</span>(</span><br><span class="line">                db.query(</span><br><span class="line">                    <span class="string">f&quot;select * from demo_data where name=&#x27;<span class="subst">&#123;<span class="string">&#x27;&#x27;</span>.join(random.choices(TEMP, k=random.randrange(<span class="number">1</span>, <span class="number">254</span>)))&#125;</span>&#x27;&quot;</span></span><br><span class="line">                )</span><br><span class="line">            ),</span><br><span class="line">            default=<span class="built_in">str</span></span><br><span class="line">        ),</span><br><span class="line">        status=<span class="number">200</span>,</span><br><span class="line">        content_type=<span class="string">&quot;application/json&quot;</span>,</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>FastAPI 代码如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">List</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> databases</span><br><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"><span class="keyword">import</span> sqlalchemy</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI</span><br><span class="line"><span class="keyword">from</span> fastapi.responses <span class="keyword">import</span> Response</span><br><span class="line"><span class="keyword">from</span> pydantic <span class="keyword">import</span> BaseModel</span><br><span class="line"></span><br><span class="line">pymysql.install_as_MySQLdb()</span><br><span class="line"></span><br><span class="line">AYSNC_DATABASE_URL = <span class="string">f&quot;mysql+aiomysql://<span class="subst">&#123;os.getenv(<span class="string">&#x27;DATABASE_USER&#x27;</span>)&#125;</span>:<span class="subst">&#123;os.getenv(<span class="string">&#x27;DATABASE_PASSWORD&#x27;</span>)&#125;</span>@<span class="subst">&#123;os.getenv(<span class="string">&#x27;DATABASE_HOST&#x27;</span>)&#125;</span>:3306/demo&quot;</span></span><br><span class="line">SYNC_DATABASE_URL = <span class="string">f&quot;mysql+mysqldb://<span class="subst">&#123;os.getenv(<span class="string">&#x27;DATABASE_USER&#x27;</span>)&#125;</span>:<span class="subst">&#123;os.getenv(<span class="string">&#x27;DATABASE_PASSWORD&#x27;</span>)&#125;</span>@<span class="subst">&#123;os.getenv(<span class="string">&#x27;DATABASE_HOST&#x27;</span>)&#125;</span>:3306/demo&quot;</span></span><br><span class="line"></span><br><span class="line">database = databases.Database(AYSNC_DATABASE_URL, max_size=<span class="number">10000</span>)</span><br><span class="line"></span><br><span class="line">metadata = sqlalchemy.MetaData()</span><br><span class="line"></span><br><span class="line">demo_data = sqlalchemy.Table(</span><br><span class="line">    <span class="string">&quot;demo_data&quot;</span>,</span><br><span class="line">    metadata,</span><br><span class="line">    sqlalchemy.Column(<span class="string">&quot;id&quot;</span>, sqlalchemy.Integer, primary_key=<span class="literal">True</span>),</span><br><span class="line">    sqlalchemy.Column(<span class="string">&quot;name&quot;</span>, sqlalchemy.String),</span><br><span class="line">    sqlalchemy.Column(<span class="string">&quot;create_time&quot;</span>, sqlalchemy.DATETIME),</span><br><span class="line">    sqlalchemy.Column(<span class="string">&quot;update_time&quot;</span>, sqlalchemy.DATETIME),</span><br><span class="line">)</span><br><span class="line">engine = sqlalchemy.create_engine(SYNC_DATABASE_URL)</span><br><span class="line">metadata.create_all(engine)</span><br><span class="line">TEMP = <span class="string">&quot;1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!@#$%^&amp;*()_+=-&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DemoData</span>(<span class="title class_ inherited__">BaseModel</span>):</span><br><span class="line">    <span class="built_in">id</span>: <span class="built_in">int</span></span><br><span class="line">    name: <span class="built_in">str</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app = FastAPI()</span><br><span class="line"></span><br><span class="line">init = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&quot;/demo&quot;</span>, response_model=<span class="type">List</span>[DemoData]</span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">demo_code</span>():</span><br><span class="line">    <span class="keyword">global</span> init</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> init:</span><br><span class="line">        <span class="keyword">await</span> database.connect()</span><br><span class="line">        init = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    query = demo_data.select().where(</span><br><span class="line">        demo_data.c.name == <span class="string">&quot;&quot;</span>.join(random.choices(TEMP, k=random.randrange(<span class="number">1</span>, <span class="number">254</span>)))</span><br><span class="line">    )</span><br><span class="line">    data = <span class="keyword">await</span> database.fetch_all(query)</span><br><span class="line">    response = json.dumps(data, default=<span class="built_in">str</span>)</span><br><span class="line">    <span class="keyword">return</span> Response(content=response, status_code=<span class="number">200</span>, media_type=<span class="string">&quot;application/json&quot;</span>)</span><br></pre></td></tr></table></figure><p>Starlette 代码如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">List</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> databases</span><br><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> sqlalchemy</span><br><span class="line"><span class="keyword">from</span> starlette.applications <span class="keyword">import</span> Starlette</span><br><span class="line"><span class="keyword">from</span> starlette.responses <span class="keyword">import</span> Response</span><br><span class="line"><span class="keyword">from</span> starlette.routing <span class="keyword">import</span> Route</span><br><span class="line"><span class="keyword">from</span> pydantic <span class="keyword">import</span> BaseModel</span><br><span class="line"></span><br><span class="line">pymysql.install_as_MySQLdb()</span><br><span class="line"></span><br><span class="line">AYSNC_DATABASE_URL = <span class="string">f&quot;mysql+aiomysql://<span class="subst">&#123;os.getenv(<span class="string">&#x27;DATABASE_USER&#x27;</span>)&#125;</span>:<span class="subst">&#123;os.getenv(<span class="string">&#x27;DATABASE_PASSWORD&#x27;</span>)&#125;</span>@<span class="subst">&#123;os.getenv(<span class="string">&#x27;DATABASE_HOST&#x27;</span>)&#125;</span>:3306/demo&quot;</span></span><br><span class="line">SYNC_DATABASE_URL = <span class="string">f&quot;mysql+mysqldb://<span class="subst">&#123;os.getenv(<span class="string">&#x27;DATABASE_USER&#x27;</span>)&#125;</span>:<span class="subst">&#123;os.getenv(<span class="string">&#x27;DATABASE_PASSWORD&#x27;</span>)&#125;</span>@<span class="subst">&#123;os.getenv(<span class="string">&#x27;DATABASE_HOST&#x27;</span>)&#125;</span>:3306/demo&quot;</span></span><br><span class="line"></span><br><span class="line">database = databases.Database(AYSNC_DATABASE_URL, max_size=<span class="number">10000</span>)</span><br><span class="line"></span><br><span class="line">metadata = sqlalchemy.MetaData()</span><br><span class="line"></span><br><span class="line">demo_data = sqlalchemy.Table(</span><br><span class="line">    <span class="string">&quot;demo_data&quot;</span>,</span><br><span class="line">    metadata,</span><br><span class="line">    sqlalchemy.Column(<span class="string">&quot;id&quot;</span>, sqlalchemy.Integer, primary_key=<span class="literal">True</span>),</span><br><span class="line">    sqlalchemy.Column(<span class="string">&quot;name&quot;</span>, sqlalchemy.String),</span><br><span class="line">    sqlalchemy.Column(<span class="string">&quot;create_time&quot;</span>, sqlalchemy.DATETIME),</span><br><span class="line">    sqlalchemy.Column(<span class="string">&quot;update_time&quot;</span>, sqlalchemy.DATETIME),</span><br><span class="line">)</span><br><span class="line">engine = sqlalchemy.create_engine(SYNC_DATABASE_URL)</span><br><span class="line">metadata.create_all(engine)</span><br><span class="line">TEMP = <span class="string">&quot;1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!@#$%^&amp;*()_+=-&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DemoData</span>(<span class="title class_ inherited__">BaseModel</span>):</span><br><span class="line">    <span class="built_in">id</span>: <span class="built_in">int</span></span><br><span class="line">    name: <span class="built_in">str</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">init = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">demo_code</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">global</span> init</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> init:</span><br><span class="line">        <span class="keyword">await</span> database.connect()</span><br><span class="line">        init = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    query = demo_data.select().where(</span><br><span class="line">        demo_data.c.name == <span class="string">&quot;&quot;</span>.join(random.choices(TEMP, k=random.randrange(<span class="number">1</span>, <span class="number">254</span>)))</span><br><span class="line">    )</span><br><span class="line">    data = <span class="keyword">await</span> database.fetch_all(query)</span><br><span class="line">    <span class="keyword">return</span> Response(content=json.dumps(data, default=<span class="built_in">str</span>), status_code=<span class="number">200</span>, media_type=<span class="string">&quot;application/json&quot;</span>)</span><br><span class="line"></span><br><span class="line">routes = [</span><br><span class="line">    Route(<span class="string">&quot;/demo&quot;</span>, demo_code, methods=[<span class="string">&quot;GET&quot;</span>]),</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">app = Starlette(debug=<span class="literal">False</span>, routes=routes)</span><br></pre></td></tr></table></figure><p>然后部署方式如下</p><ol><li>各服务都部署在 K8S 上，POD 类型为 Guaranteed</li><li>所有镜像都基于 3.12 构建</li><li>服务限制 6Core 的 CPU</li><li>Django 和 Flask 基于 Gevent + Gunicorn 进行部署，利用 Greenify 对二进制进行 Patch</li><li>FastAPI 和 Starlette 基于 uvicorn 进行部署，使用 uvloop 作为 event loop</li></ol><p>OK， 我们现在来公布测试结果</p><h2 id="标准操作下的测试结果"><a href="#标准操作下的测试结果" class="headerlink" title="标准操作下的测试结果"></a>标准操作下的测试结果</h2><p>Django:</p><p><img src="https://i.imgur.com/28P4bcT.png" alt="django"></p><p>FastAPI</p><p><img src="https://i.imgur.com/T1xiYZe.png" alt="FastAPI"></p><p>Flask</p><p><img src="https://i.imgur.com/mUkzLNf.png" alt="Flask"></p><p>Starlette </p><p><img src="https://i.imgur.com/8Fu8vST.png" alt="Starlette"></p><p>Django 毫无疑问的最后，其余三者的性能是 Flask + Gevent &gt; Starlette &gt; FastAPI，后三个框架 CPU 占用率均 &gt; 90%</p><h2 id="空转测试"><a href="#空转测试" class="headerlink" title="空转测试"></a>空转测试</h2><p>为了保险起见，我们将后续三个框架进行空转测试</p><p>Flask</p><p><img src="https://i.imgur.com/9DjHr00.png" alt="Flask"></p><p>FastAPI</p><p><img src="https://i.imgur.com/4hq7gqo.png" alt="FastAPI"></p><p>Starlette</p><p><img src="https://i.imgur.com/Pugbi7M.png" alt="Starlette"></p><p>Starlette &gt; FastAPI &gt; Flask + Gevent</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>目前来看，整体结论是这样</p><ol><li>在空转情况下，asyncio 的性能要搞出 Gevent 不少，加上框架因素后，也有百分之10-20% 的提升</li><li>在 ORM + MySQL Driver 的情况下，Gevent 的生态要好于 asyncio 的生态</li></ol><p>如果换成 ORM + PGSQL 的生态结论会不会更好一些呢？有点期待下一轮测试的结果</p>
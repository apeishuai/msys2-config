<p>和 SRE 日志 系列一样，Debug 日志用来复盘我一些可以公开的调试经历，希望能帮助到大家。</p><p>这篇是 Python 3.13 Beta 下 JIT/Tier 2 优化器的一个 Bug ，前后历时五天，最终修改点很小，非常有趣</p><span id="more"></span><h2 id="开篇"><a href="#开篇" class="headerlink" title="开篇"></a>开篇</h2><p>13号的时候，用户反馈了一个 Bug，编号 GH120437<a href="#refer-anchor-1"><sup>1</sup></a> ，具体的行为是这样</p><p>Python 3.13 引入了实验性的 JIT 优化器，具体的细节可以参考我之前的文章 简单聊聊 Python 3.13 的 JIT 方案<a href="#refer-anchor-2"><sup>2</sup></a>，用户可以在构建的时候选择性的开启</p><blockquote><p>./configure —enable-experimental-jit —with-pydebug &amp;&amp; make -j</p></blockquote><p>用户在开启 JIT 的情况下，发现了一个非常奇怪的问题，执行</p><blockquote><p>./python -m ensurepip</p></blockquote><p>会抛出异常</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">subprocess.CalledProcessError: Command &#x27;[&#x27;/home/jglass/Documents/cpython/python&#x27;, &#x27;-W&#x27;, &#x27;ignore::DeprecationWarning&#x27;, &#x27;-c&#x27;, &#x27;\nimport runpy\nimport sys\nsys.path = [\&#x27;/tmp/tmpsu81mj6o/pip-24.0-py3-none-any.whl\&#x27;] + sys.path\nsys.argv[1:] = [\&#x27;install\&#x27;, \&#x27;--no-cache-dir\&#x27;, \&#x27;--no-index\&#x27;, \&#x27;--find-links\&#x27;, \&#x27;/tmp/tmpsu81mj6o\&#x27;, \&#x27;pip\&#x27;]\nrunpy.run_module(&quot;pip&quot;, run_name=&quot;__main__&quot;, alter_sys=True)\n&#x27;]&#x27; died with &lt;Signals.SIGABRT: 6&gt;.</span><br></pre></td></tr></table></figure><p>我在最新分支上无法复现这个问题，在3.13分支上能够稳定复现。</p><p>能够稳定复现就好办了。首先为了调试下去，我们需要在一个更小范围的能够复现的测试用例，我去阅读了一下 ensurepip 部分的代码，有关的部分大概长这样</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">_run_pip</span>(<span class="params">args, additional_paths=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="comment"># Run the bootstrapping in a subprocess to avoid leaking any state that happens</span></span><br><span class="line">    <span class="comment"># after pip has executed. Particularly, this avoids the case when pip holds onto</span></span><br><span class="line">    <span class="comment"># the files in *additional_paths*, preventing us to remove them at the end of the</span></span><br><span class="line">    <span class="comment"># invocation.</span></span><br><span class="line">    code = <span class="string">f&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">import runpy</span></span><br><span class="line"><span class="string">import sys</span></span><br><span class="line"><span class="string">sys.path = <span class="subst">&#123;additional_paths <span class="keyword">or</span> []&#125;</span> + sys.path</span></span><br><span class="line"><span class="string">sys.argv[1:] = <span class="subst">&#123;args&#125;</span></span></span><br><span class="line"><span class="string">runpy.run_module(&quot;pip&quot;, run_name=&quot;__main__&quot;, alter_sys=True)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    cmd = [</span><br><span class="line">        sys.executable,</span><br><span class="line">        <span class="string">&#x27;-W&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;ignore::DeprecationWarning&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;-c&#x27;</span>,</span><br><span class="line">        code,</span><br><span class="line">    ]</span><br><span class="line">    <span class="keyword">if</span> sys.flags.isolated:</span><br><span class="line">        <span class="comment"># run code in isolated mode if currently running isolated</span></span><br><span class="line">        cmd.insert(<span class="number">1</span>, <span class="string">&#x27;-I&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> subprocess.run(cmd, check=<span class="literal">True</span>).returncode</span><br></pre></td></tr></table></figure><p>那么这里我直接构造一个 Python 脚本，直接用 Python 来执行，理论上讲是没有问题的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> runpy</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.path = [<span class="string">&#x27;/tmp/tmp04bw2hi9/pip-23.3.2-py3-none-any.whl&#x27;</span>] + sys.path</span><br><span class="line">sys.argv[<span class="number">1</span>:] = [<span class="string">&#x27;install&#x27;</span>, <span class="string">&#x27;--no-cache-dir&#x27;</span>, <span class="string">&#x27;--no-index&#x27;</span>, <span class="string">&#x27;--find-links&#x27;</span>, <span class="string">&#x27;/tmp/tmp04bw2hi9&#x27;</span>, <span class="string">&#x27;pip&#x27;</span>]</span><br><span class="line">runpy.run_module(<span class="string">&quot;pip&quot;</span>, run_name=<span class="string">&quot;__main__&quot;</span>, alter_sys=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>bingo，这个脚本能够稳定复现问题，那么我们就可以开始进一步的分析问题了</p><p>我们现在要做的一个很关键的事是确认 Bug 引入的时间点和范围。那么这个问题理论上讲是 JIT 优化器引入的，JIT 第一个引入的 commit 是 f6d9e5926b6138994eaa60d1c36462e36105733d<a href="#refer-anchor-3"><sup>3</sup></a>，那么我们可以通过 git bisect 来确认问题的引入时间点（这里额外的确认是该 commit 前一个 commit 是没有问题的）</p><p>经过确认后，我们发现问题的引入时间点是 1ab6356ebec25f216a0eddbd81225abcb93f2d55<a href="#refer-anchor-4"><sup>4</sup></a>，那么我们就可以开始进一步的分析了</p><p>先上 gdb ，看一下栈的情况</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">__pthread_kill_implementation (threadid=&lt;optimized out&gt;, signo=signo@entry=6, no_tid=no_tid@entry=0) at pthread_kill.c:44</span><br><span class="line">44            return INTERNAL_SYSCALL_ERROR_P (ret) ? INTERNAL_SYSCALL_ERRNO (ret) : 0;                                                                                                                          </span><br><span class="line">(gdb) bt</span><br><span class="line">#0  __pthread_kill_implementation (threadid=&lt;optimized out&gt;, signo=signo@entry=6, no_tid=no_tid@entry=0) at pthread_kill.c:44</span><br><span class="line">#1  0x00007ffff7d3eeb3 in __pthread_kill_internal (threadid=&lt;optimized out&gt;, signo=6) at pthread_kill.c:78</span><br><span class="line">#2  0x00007ffff7ce6a30 in __GI_raise (sig=sig@entry=6) at ../sysdeps/posix/raise.c:26</span><br><span class="line">#3  0x00007ffff7cce4c3 in __GI_abort () at abort.c:79</span><br><span class="line">#4  0x00007ffff7cce3df in __assert_fail_base (fmt=0x7ffff7e59b68 &quot;%s%s%s:%u: %s%sAssertion `%s&#x27; failed.\n%n&quot;, assertion=assertion@entry=0x7ffff69bb47c &quot;tstate-&gt;datastack_top &lt; tstate-&gt;datastack_limit&quot;, </span><br><span class="line">    file=file@entry=0x7ffff69bb431 &quot;/home/manjusaka/Documents/projects/cpython/Include/internal/pycore_frame.h&quot;, line=line@entry=284, </span><br><span class="line">    function=function@entry=0x7ffff69bb4ac &quot;_PyInterpreterFrame *_PyFrame_PushUnchecked(PyThreadState *, PyFunctionObject *, int)&quot;) at assert.c:94</span><br><span class="line">#5  0x00007ffff7cdec67 in __assert_fail (assertion=0x7ffff69bb47c &quot;tstate-&gt;datastack_top &lt; tstate-&gt;datastack_limit&quot;, </span><br><span class="line">    file=0x7ffff69bb431 &quot;/home/manjusaka/Documents/projects/cpython/Include/internal/pycore_frame.h&quot;, line=284, </span><br><span class="line">    function=0x7ffff69bb4ac &quot;_PyInterpreterFrame *_PyFrame_PushUnchecked(PyThreadState *, PyFunctionObject *, int)&quot;) at assert.c:103</span><br><span class="line">#6  0x00007ffff69b07e8 in ?? ()</span><br><span class="line">#7  0x416b4a710a2907e9 in ?? ()</span><br><span class="line">#8  0x00005555556c9023 in _Py_INCREF_IncRefTotal () at Objects/object.c:230</span><br><span class="line">Backtrace stopped: previous frame inner to this frame (corrupt stack?)</span><br></pre></td></tr></table></figure><p>What the fuck，这什么栈？我们能拿到的唯一的有效信息是崩溃在这里</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="keyword">inline</span> _PyInterpreterFrame *</span><br><span class="line">_PyFrame_PushUnchecked(PyThreadState *tstate, PyFunctionObject *func, <span class="type">int</span> null_locals_from)</span><br><span class="line">&#123;</span><br><span class="line">    CALL_STAT_INC(frames_pushed);</span><br><span class="line">    PyCodeObject *code = (PyCodeObject *)func-&gt;func_code;</span><br><span class="line">    _PyInterpreterFrame *new_frame = (_PyInterpreterFrame *)tstate-&gt;datastack_top;</span><br><span class="line">    tstate-&gt;datastack_top += code-&gt;co_framesize;</span><br><span class="line">    assert(tstate-&gt;datastack_top &lt; tstate-&gt;datastack_limit);</span><br><span class="line">    _PyFrame_Initialize(new_frame, func, <span class="literal">NULL</span>, code, null_locals_from);</span><br><span class="line">    <span class="keyword">return</span> new_frame;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其余的信息，没有。。。这也算 JIT 的坑了，由于是动态加载的二进制，会导致调试进程的时候会有很多额外的工作量。理论上我可以挂一下 frame 拿到 executor 的信息然后再调 JIT 的汇编的，但是我不想这么搞啊？</p><p>这里陷入了僵局，我在实在没想到很好的办法准备硬调的时候，遛狗时突然想起 Python 的 JIT 是基于 Copy and Patch 做的，是基于已有的 executor case 来生成 JIT 二进制的（具体细节还是参考我之前那篇文章）。那么我应该可以直接将 JIT 的部分关掉，只用 Tier2 优化器的 OPCODE 来测试，应该行为是一致的</p><p>重新基于 <code>./configure --with-pydebug --enable-pystats --enable-profiling --with-dtrace --enable-experimental-jit=interpreter</code> 来编译代码，用gdb 测试，果然，这次的栈美好了很多</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">#1  0x00007ffff7d3eeb3 in __pthread_kill_internal (threadid=&lt;optimized out&gt;, signo=6) at pthread_kill.c:78</span><br><span class="line">#2  0x00007ffff7ce6a30 in __GI_raise (sig=sig@entry=6) at ../sysdeps/posix/raise.c:26</span><br><span class="line">#3  0x00007ffff7cce4c3 in __GI_abort () at abort.c:79</span><br><span class="line">#4  0x00007ffff7cce3df in __assert_fail_base (fmt=0x7ffff7e59b68 &quot;%s%s%s:%u: %s%sAssertion `%s&#x27; failed.\n%n&quot;, assertion=assertion@entry=0x55555591a150 &quot;tstate-&gt;datastack_top &lt; tstate-&gt;datastack_limit&quot;, </span><br><span class="line">    file=file@entry=0x555555901138 &quot;./Include/internal/pycore_frame.h&quot;, line=line@entry=284, function=function@entry=0x555555977030 &lt;__PRETTY_FUNCTION__.30&gt; &quot;_PyFrame_PushUnchecked&quot;) at assert.c:94</span><br><span class="line">#5  0x00007ffff7cdec67 in __assert_fail (assertion=assertion@entry=0x55555591a150 &quot;tstate-&gt;datastack_top &lt; tstate-&gt;datastack_limit&quot;, file=file@entry=0x555555901138 &quot;./Include/internal/pycore_frame.h&quot;, </span><br><span class="line">    line=line@entry=284, function=function@entry=0x555555977030 &lt;__PRETTY_FUNCTION__.30&gt; &quot;_PyFrame_PushUnchecked&quot;) at assert.c:103</span><br><span class="line">#6  0x000055555578ec88 in _PyFrame_PushUnchecked (tstate=tstate@entry=0x555555d9e0c0 &lt;_PyRuntime+293952&gt;, func=&lt;optimized out&gt;, null_locals_from=null_locals_from@entry=3)</span><br><span class="line">    at ./Include/internal/pycore_frame.h:284</span><br><span class="line">#7  0x00005555557b8c51 in _PyEval_EvalFrameDefault (tstate=0x555555d9e0c0 &lt;_PyRuntime+293952&gt;, frame=0x7ffff7f98e58, throwflag=0) at Python/executor_cases.c.h:3326</span><br><span class="line">#8  0x00005555557bc37e in _PyEval_EvalFrame (tstate=tstate@entry=0x555555d9e0c0 &lt;_PyRuntime+293952&gt;, frame=&lt;optimized out&gt;, throwflag=throwflag@entry=0) at ./Include/internal/pycore_ceval.h:118</span><br><span class="line">#9  0x00005555557bc4a4 in _PyEval_Vector (tstate=0x555555d9e0c0 &lt;_PyRuntime+293952&gt;, func=0x7ffff6fe10d0, locals=locals@entry=0x0, args=0x7fffffff15e0, argcount=2, kwnames=0x0) at Python/ceval.c:1818</span><br><span class="line">#10 0x00005555556728e4 in _PyFunction_Vectorcall (func=&lt;optimized out&gt;, stack=&lt;optimized out&gt;, nargsf=&lt;optimized out&gt;, kwnames=&lt;optimized out&gt;) at Objects/call.c:413</span><br><span class="line">#11 0x0000555555672c54 in _PyObject_VectorcallTstate (tstate=tstate@entry=0x555555d9e0c0 &lt;_PyRuntime+293952&gt;, callable=callable@entry=&lt;function at remote 0x7ffff6fe10d0&gt;, args=args@entry=0x7fffffff15e0, </span><br><span class="line">    nargsf=nargsf@entry=2, kwnames=kwnames@entry=0x0) at ./Include/internal/pycore_call.h:168</span><br><span class="line">#12 0x0000555555673b8c in object_vacall (tstate=tstate@entry=0x555555d9e0c0 &lt;_PyRuntime+293952&gt;, base=base@entry=0x0, callable=&lt;function at remote 0x7ffff6fe10d0&gt;, vargs=vargs@entry=0x7fffffff1660)</span><br><span class="line">    at Objects/call.c:819</span><br><span class="line">#13 0x0000555555673cea in PyObject_CallMethodObjArgs (obj=0x0, name=&lt;optimized out&gt;) at Objects/call.c:880</span><br><span class="line">#14 0x00005555557fb230 in import_find_and_load (tstate=tstate@entry=0x555555d9e0c0 &lt;_PyRuntime+293952&gt;, abs_name=abs_name@entry=&#x27;_winapi&#x27;) at Python/import.c:3080</span><br><span class="line">#15 0x00005555557feb3a in PyImport_ImportModuleLevelObject (name=name@entry=&#x27;_winapi&#x27;, globals=&lt;optimized out&gt;, </span><br><span class="line">    locals=locals@entry=&#123;&#x27;__name__&#x27;: &#x27;mimetypes&#x27;, &#x27;__doc__&#x27;: &#x27;Guess the MIME type of a file.\n\nThis module defines two useful functions:\n\nguess_type(url, strict=True) -- guess the MIME type and encoding of a URL.\n\nguess_extension(type, strict=True) -- guess the extension for a given MIME type.\n\nIt also contains the following, for tuning the behavior:\n\nData:\n\nknownfiles -- list of files to parse\ninited -- flag set when init() has been called\nsuffix_map -- dictionary mapping suffixes to suffixes\nencodings_map -- dictionary mapping suffixes to encodings\ntypes_map -- dictionary mapping suffixes to types\n\nFunctions:\n\ninit([files]) -- parse a list of files, default knownfiles (on Windows, the\n  default values are taken from the registry)\nread_mime_types(file) -- parse one file, return a dictionary or None\n&#x27;, &#x27;__package__&#x27;: &#x27;&#x27;, &#x27;__loader__&#x27;: &lt;SourceFileLoader(name=&#x27;mimetypes&#x27;, path=&#x27;/home/manjusaka/Documents/projects/cpython/Lib/mimetypes.py&#x27;) at remote 0x7ffff5395100&gt;, &#x27;__spec__&#x27;: &lt;ModuleSpec(name=&#x27;mimetypes&#x27;, loader...(truncated), fromlist=fromlist@entry=(&#x27;_mimetypes_read_windows_registry&#x27;,), level=level@entry=0) at Python/import.c:3160</span><br><span class="line">#16 0x000055555578f3fa in import_name (tstate=tstate@entry=0x555555d9e0c0 &lt;_PyRuntime+293952&gt;, frame=frame@entry=0x7ffff7f98b18, name=&#x27;_winapi&#x27;, fromlist=fromlist@entry=(&#x27;_mimetypes_read_windows_registry&#x27;,), </span><br><span class="line">    level=level@entry=0) at Python/ceval.c:2629</span><br><span class="line">#17 0x00005555557a244b in _PyEval_EvalFrameDefault (tstate=0x555555d9e0c0 &lt;_PyRuntime+293952&gt;, frame=0x7ffff7f98b18, throwflag=0) at Python/generated_cases.c.h:3196</span><br><span class="line">#18 0x00005555557bc37e in _PyEval_EvalFrame (tstate=tstate@entry=0x555555d9e0c0 &lt;_PyRuntime+293952&gt;, frame=&lt;optimized out&gt;, throwflag=throwflag@entry=0) at ./Include/internal/pycore_ceval.h:118</span><br></pre></td></tr></table></figure><p>这个栈看着就轻松很多了，我们很轻松的来到 #7 ，判断出当前的 opcode <code>_INIT_CALL_PY_EXACT_ARGS_x</code>，这是一个 Tier2 的特化指令，这里可以近似的认为我们对于这个指令有足够的上下文，比如函数初始化的时候参数有两个（对应此处的 _INIT_CALL_PY_EXACT_ARGS_2),然后有一些 short pass，在这个 short pass 中，_PyFrame_PushUnchecked 会被快速调用（免去了额外的 frame 大小的校验）。那么我最开始的想法是这样，我可以在这个指令的特化逻辑加一个额外的 check，如果当前的线程状态中保存的栈大小小于我们需要的大小，那么则退出特化，走传统的调用方式，那么更改起来也相对简单，<code>_INIT_CALL_PY_EXACT_ARGS_x</code> 有一个前置指令是 <code>_CHECK_FUNCTION_EXACT_ARGS</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">op(_CHECK_FUNCTION_EXACT_ARGS, (func_version/<span class="number">2</span>, callable, self_or_null, unused[oparg] -- callable, self_or_null, unused[oparg])) &#123;</span><br><span class="line">    EXIT_IF(!PyFunction_Check(callable));</span><br><span class="line">    PyFunctionObject *func = (PyFunctionObject *)callable;</span><br><span class="line">    EXIT_IF(func-&gt;func_version != func_version);</span><br><span class="line">    PyCodeObject *code = (PyCodeObject *)func-&gt;func_code;</span><br><span class="line">    EXIT_IF(code-&gt;co_argcount != oparg + (self_or_null != <span class="literal">NULL</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么我们可以在这里添加一个额外的特化处理逻辑，如果当前的线程状态中保存的栈大小小于我们需要的大小，那么则退出特化，走传统的调用方式</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">op(_CHECK_FUNCTION_EXACT_ARGS, (func_version/<span class="number">2</span>, callable, self_or_null, unused[oparg] -- callable, self_or_null, unused[oparg])) &#123;</span><br><span class="line">    EXIT_IF(!PyFunction_Check(callable));</span><br><span class="line">    PyFunctionObject *func = (PyFunctionObject *)callable;</span><br><span class="line">    EXIT_IF(func-&gt;func_version != func_version);</span><br><span class="line">    PyCodeObject *code = (PyCodeObject *)func-&gt;func_code;</span><br><span class="line">    EXIT_IF(code-&gt;co_argcount != oparg + (self_or_null != <span class="literal">NULL</span>));</span><br><span class="line">    EXIT_IF(!_PyThreadState_HasStackSpace(tstate, code-&gt;co_framesize));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译后通过测试，问题解决，我开始提交 PR。你是不是以为到这里就完事了？不，这里我犯了一个很典型的错误就是，逻辑没有闭环，我没有解释清楚，为什么在 1ab6356ebec25f216a0eddbd81225abcb93f2d55<a href="#refer-anchor-4"><sup>4</sup></a> 引入了这个 Bug？查问题的时候逻辑闭环是个非常重要的事情</p><p>在提交 PR 后，核心开发者 Ken Jin（也是我现在的 Mentor）提醒我，这里的问题实际上可能和 <code>_INIT_CALL_PY_EXACT_ARGS_x</code> 毫无关联，而是 <code>_CHECK_STACK_SPACE</code> 特化的一个问题</p><p>他之所以能确定这一点，是因为他在看到这个问题的时候将 <code>_CHECK_STACK_SPACE</code> 的部分注释掉后，发现这个地方能够正常的运行。那么通常来说一个 Bug 只能有一个原因，那么我现在需要来查一查为什么 <code>_CHECK_STACK_SPACE</code> 会导致这个问题</p><p>这里要介绍下 <code>_CHECK_STACK_SPACE</code> 特化，是在 GH-116168<a href="#refer-anchor-5"><sup>5</sup></a> 中引入的，这个特化的目的是为了在特定的情况下，我们可以合并一些栈的检查，这个特化的逻辑是这样</p><p>假设我们有这样的顺序调用，字节码如下</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">_CHECK_STACK_SPACE A</span><br><span class="line">_PUSH_FRAME</span><br><span class="line">_POP_FRAME</span><br><span class="line">_CHECK_STACK_SPACE B</span><br><span class="line">_PUSH_FRAME</span><br><span class="line">_POP_FRAME</span><br></pre></td></tr></table></figure><p>那么我们可以确定这个函数需要的大小是 max(A,B)，那我们特化的后的指令如下</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">_CHECK_STACK_SPACE max(A, B)</span><br><span class="line">_PUSH_FRAME</span><br><span class="line">_POP_FRAME</span><br><span class="line">_PUSH_FRAME</span><br><span class="line">_POP_FRAME</span><br></pre></td></tr></table></figure><p>对于嵌套调用</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">_CHECK_STACK_SPACE A</span><br><span class="line">_PUSH_FRAME</span><br><span class="line">_CHECK_STACK_SPACE B</span><br><span class="line">_PUSH_FRAME</span><br><span class="line">_POP_FRAME</span><br><span class="line">_POP_FRAME</span><br></pre></td></tr></table></figure><p>那么我们可以确定这个函数需要的大小是 A + B，那我们特化的后的指令如下</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">_CHECK_STACK_SPACE A + B</span><br><span class="line">_PUSH_FRAME</span><br><span class="line">_PUSH_FRAME</span><br><span class="line">_POP_FRAME</span><br><span class="line">_POP_FRAME</span><br></pre></td></tr></table></figure><p>实现上来说，在第一次调用 <code>_CHECK_STACK_SPACE</code> 的时候，会有这样的逻辑</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> _CHECK_STACK_SPACE: &#123;</span><br><span class="line">    assert(corresponding_check_stack == <span class="literal">NULL</span>);</span><br><span class="line">    corresponding_check_stack = &amp;buffer[pc];</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们将当前指令放在 corresponding_check_stack 中，然后在第一次调用 <code>_PUSH_FRAME</code> 的时候，我们会有这样的逻辑</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">max_space = curr_space &gt; max_space ? curr_space : max_space;</span><br><span class="line"><span class="keyword">if</span> (first_valid_check_stack == <span class="literal">NULL</span>) &#123;</span><br><span class="line">    first_valid_check_stack = corresponding_check_stack;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// delete all but the first valid _CHECK_STACK_SPACE</span></span><br><span class="line">    corresponding_check_stack-&gt;opcode = _NOP;</span><br><span class="line">&#125;</span><br><span class="line">corresponding_check_stack = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br></pre></td></tr></table></figure><p>在最后第一次执行完成的时候，我们会有这样的逻辑</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">finish:</span><br><span class="line">    <span class="keyword">if</span> (first_valid_check_stack != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        assert(first_valid_check_stack-&gt;opcode == _CHECK_STACK_SPACE);</span><br><span class="line">        assert(max_space &gt; <span class="number">0</span>);</span><br><span class="line">        assert(max_space &lt;= INT_MAX);</span><br><span class="line">        assert(max_space &lt;= INT32_MAX);</span><br><span class="line">        first_valid_check_stack-&gt;opcode = _CHECK_STACK_SPACE_OPERAND;</span><br><span class="line">        first_valid_check_stack-&gt;operand = max_space;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这里实际上是将 <code>_CHECK_STACK_SPACE</code> 的逻辑合并到了 <code>_CHECK_STACK_SPACE_OPERAND</code> 中，然后新指令的操作数是我们在执行过程中确认的当前我们需要的最大的 frame，那么我们可以看到，这里的逻辑是没有问题的，那么问题出在哪里呢？</p><p>在 1ab6356ebec25f216a0eddbd81225abcb93f2d55<a href="#refer-anchor-4"><sup>4</sup></a> 中，作者将在引入的新指令 <code>_PY_FRAME_GENERAL</code> 中 <code>first_valid_check_stack</code> 设置为 NULL，这会导致最后的指令替换的逻辑没法执行，同时我们在 <code>_PUSH_FRAME</code> 中将后续的 <code>_CHECK_STACK_SPACE</code> 指令替换为了 <code>_NOP</code>，这会导致我们 stack check 事实上的失效，最终导致进程的 crash</p><p>在确定最终的 root cause 后，这个问题就可以被修复了（就一行有效变更）</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这个问题是典型的查起来麻烦，修起来简单的问题，不过这个查 bug 过程我觉得挺有价值的，所以单独记录一下吧。以及 Python 的 Tier2 优化器设计真的蛮有趣的，希望后面能发现更多好玩的点（我目前在尝试做常量类型 Guard 的优化，希望能顺利）</p><p>差不多这样</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><div id="refer-anchor-1"></div><ul><li>[1]. <a href="https://github.com/python/cpython/issues/120437">https://github.com/python/cpython/issues/120437</a></li></ul><div id="refer-anchor-2"></div><ul><li>[2]. <a href="https://www.manjusaka.blog/posts/2024/01/03/a-simple-introduction-about-python-jit/">https://www.manjusaka.blog/posts/2024/01/03/a-simple-introduction-about-python-jit/</a></li></ul><div id="refer-anchor-3"></div><ul><li>[3]. <a href="https://github.com/python/cpython/commit/f6d9e5926b6138994eaa60d1c36462e36105733d">https://github.com/python/cpython/commit/f6d9e5926b6138994eaa60d1c36462e36105733d</a></li></ul><div id="refer-anchor-4"></div><ul><li>[4]. <a href="https://github.com/python/cpython/commit/1ab6356ebec25f216a0eddbd81225abcb93f2d55">https://github.com/python/cpython/commit/1ab6356ebec25f216a0eddbd81225abcb93f2d55</a></li></ul><div id="refer-anchor-5"></div><ul><li>[5]. <a href="https://github.com/python/cpython/issues/116168">https://github.com/python/cpython/issues/116168</a></li></ul>
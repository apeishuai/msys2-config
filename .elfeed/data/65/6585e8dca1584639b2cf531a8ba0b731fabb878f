<p>Debug 日志系列第二篇，eCapture 的 GH-604， 一个和 Go， Glibc，静态编译相关的问题</p><p>太长不看版：在 eCapture 中，由于在静态链接时 glibc 版本的差异，导致在 Ubuntu 下编译的二进制会在特定发行版上 Segment fault</p><span id="more"></span><h2 id="开篇"><a href="#开篇" class="headerlink" title="开篇"></a>开篇</h2><p>首先介绍下 eCapture，这个项目是基于 eBPF 做的一套安全工具，核心的能力是可以提供在旁路对于 TLS 流量解密的能力</p><p>在8月25日的时候，社区反馈了一个 bug，编号 GH-604，其核心行为如下</p><p>下载在 GitHub Release 中发布的二进制，在 Arch Linux 下会 Segment Fault，报错大致如下</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2024</span><span class="number">-09</span><span class="number">-18</span>T21:<span class="number">10</span>:<span class="number">47</span>+<span class="number">08</span>:<span class="number">00</span> INF BTF bytecode mode: CORE. btfMode=<span class="number">0</span></span><br><span class="line"><span class="number">2024</span><span class="number">-09</span><span class="number">-18</span>T21:<span class="number">10</span>:<span class="number">47</span>+<span class="number">08</span>:<span class="number">00</span> INF module initialization. isReload=<span class="literal">false</span> moduleName=EBPFProbeOPENSSL</span><br><span class="line"><span class="number">2024</span><span class="number">-09</span><span class="number">-18</span>T21:<span class="number">10</span>:<span class="number">47</span>+<span class="number">08</span>:<span class="number">00</span> INF Module.Run()</span><br><span class="line">SIGSEGV: segmentation violation</span><br><span class="line">PC=<span class="number">0x7f29ee844696</span> m=<span class="number">5</span> sigcode=<span class="number">1</span> addr=<span class="number">0x1e83c0</span></span><br><span class="line">signal arrived during cgo execution</span><br><span class="line"></span><br><span class="line">goroutine <span class="number">19</span> gp=<span class="number">0xc0005b81c0</span> m=<span class="number">5</span> mp=<span class="number">0xc000100008</span> [syscall]:</span><br><span class="line">runtime.cgocall(<span class="number">0x10990e0</span>, <span class="number">0xc0000bca90</span>)</span><br><span class="line">        /root/.<span class="keyword">go</span>/src/runtime/cgocall.<span class="keyword">go</span>:<span class="number">167</span> +<span class="number">0x4b</span> fp=<span class="number">0xc0000bca58</span> sp=<span class="number">0xc0000bca20</span> pc=<span class="number">0x4739ab</span></span><br><span class="line">net._C2func_getaddrinfo(<span class="number">0xc00058e3c0</span>, <span class="number">0x0</span>, <span class="number">0xc0005886f0</span>, <span class="number">0xc00058a0a0</span>)</span><br><span class="line">        _cgo_gotypes.<span class="keyword">go</span>:<span class="number">108</span> +<span class="number">0x55</span> fp=<span class="number">0xc0000bca90</span> sp=<span class="number">0xc0000bca58</span> pc=<span class="number">0x84a7f5</span></span><br><span class="line">net._C_getaddrinfo.func1(<span class="number">0xc00058e3c0</span>, <span class="number">0x0</span>, <span class="number">0xc0005886f0</span>, <span class="number">0xc00058a0a0</span>)</span><br><span class="line">        /root/.<span class="keyword">go</span>/src/net/cgo_unix_cgo.<span class="keyword">go</span>:<span class="number">78</span> +<span class="number">0xeb</span> fp=<span class="number">0xc0000bcb48</span> sp=<span class="number">0xc0000bca90</span> pc=<span class="number">0x84af4b</span></span><br><span class="line">net._C_getaddrinfo(<span class="number">0xc00058e3c0</span>, <span class="number">0x0</span>, <span class="number">0xc0005886f0</span>, <span class="number">0xc00058a0a0</span>)</span><br><span class="line">        /root/.<span class="keyword">go</span>/src/net/cgo_unix_cgo.<span class="keyword">go</span>:<span class="number">78</span> +<span class="number">0x6c</span> fp=<span class="number">0xc0000bcbd0</span> sp=<span class="number">0xc0000bcb48</span> pc=<span class="number">0x84adac</span></span><br><span class="line">net.cgoLookupHostIP(&#123;<span class="number">0x1351556</span>, <span class="number">0x3</span>&#125;, &#123;<span class="number">0x13727d2</span>, <span class="number">0x9</span>&#125;)</span><br><span class="line">        /root/.<span class="keyword">go</span>/src/net/cgo_unix.<span class="keyword">go</span>:<span class="number">181</span> +<span class="number">0x3f9</span> fp=<span class="number">0xc0000bce38</span> sp=<span class="number">0xc0000bcbd0</span> pc=<span class="number">0x7f65b9</span></span><br><span class="line">net.cgoLookupIP.func1()</span><br><span class="line">        /root/.<span class="keyword">go</span>/src/net/cgo_unix.<span class="keyword">go</span>:<span class="number">226</span> +<span class="number">0x85</span> fp=<span class="number">0xc0000bcf00</span> sp=<span class="number">0xc0000bce38</span> pc=<span class="number">0x7f7145</span></span><br><span class="line">net.doBlockingWithCtx[...].func1()</span><br><span class="line">        /root/.<span class="keyword">go</span>/src/net/cgo_unix.<span class="keyword">go</span>:<span class="number">70</span> +<span class="number">0x8f</span> fp=<span class="number">0xc0000bcfe0</span> sp=<span class="number">0xc0000bcf00</span> pc=<span class="number">0x84de4f</span></span><br><span class="line">runtime.goexit(&#123;&#125;)</span><br><span class="line">        /root/.<span class="keyword">go</span>/src/runtime/asm_amd64.s:<span class="number">1700</span> +<span class="number">0x1</span> fp=<span class="number">0xc0000bcfe8</span> sp=<span class="number">0xc0000bcfe0</span> pc=<span class="number">0x482301</span></span><br><span class="line">created by net.doBlockingWithCtx[...] in goroutine <span class="number">18</span></span><br><span class="line">        /root/.<span class="keyword">go</span>/src/net/cgo_unix.<span class="keyword">go</span>:<span class="number">67</span> +<span class="number">0x3c5</span></span><br></pre></td></tr></table></figure><p>我在 Garuda 下能复现同样的问题，由于作者没有 Arch Linux 的环境，那么就由我来接手了</p><p>最开始的排查方向是先利用容器环境进行启动，发现执行正常。那么目前可以初步判断是依赖的二进制版本不同导致的问题，但是 eCapture 依赖的二进制有点多，那么怎么办呢？</p><p>这个时候 issue 的提出者提供了一个关键点，这个问题是 v0.8.1 之后出现的，那么很好办，祭出我们的 <code>git bisect</code> 大法</p><p>最后确定是 938fcffb95e23015af8643ae046c0e912de0a438 带来的问题，我们来看一下代码，这个代码核心的的变更在于</p><ol><li>重构了一部分 Module 的注册逻辑</li><li>引入 Gin 框架来作为 HTTP Configuration 变更的框架</li></ol><p>那么这里我们来调试一下，因为原本的二进制是 strip 了符号信息，我们先关闭符号信息， 然后上 gdb ，获取崩溃时的栈信息，能得到如下信息</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">[Switching to LWP 1772723]</span><br><span class="line">0x00007fffabe44696 in __ctype_init () from /usr/lib/libc.so.6</span><br><span class="line">(gdb) bt</span><br><span class="line">#0  0x00007fffabe44696 in __ctype_init () from /usr/lib/libc.so.6</span><br><span class="line">#1  0x00007fffabf785d1 in __libc_early_init () from /usr/lib/libc.so.6</span><br><span class="line">#2  0x000000000118729f in dl_open_worker_begin ()</span><br><span class="line">#3  0x000000000113a7b8 in _dl_catch_exception ()</span><br><span class="line">#4  0x0000000001186469 in dl_open_worker ()</span><br><span class="line">#5  0x000000000113a7b8 in _dl_catch_exception ()</span><br><span class="line">#6  0x000000000118681b in _dl_open ()</span><br><span class="line">#7  0x000000000113a8f6 in do_dlopen ()</span><br><span class="line">#8  0x000000000113a7b8 in _dl_catch_exception ()</span><br><span class="line">#9  0x000000000113a883 in _dl_catch_error ()</span><br><span class="line">#10 0x000000000113aa74 in __libc_dlopen_mode ()</span><br><span class="line">#11 0x0000000001128eb5 in module_load ()</span><br><span class="line">#12 0x0000000001129315 in __nss_module_get_function ()</span><br><span class="line">#13 0x0000000001118fec in getaddrinfo ()</span><br><span class="line">#14 0x0000000001099119 in _cgo_04fbb8f65a5f_C2func_getaddrinfo (v=0xc00013ca90) at cgo-gcc-prolog:60</span><br><span class="line">#15 0x0000000000481f84 in runtime.asmcgocall () at /root/.go/src/runtime/asm_amd64.s:923</span><br><span class="line">#16 0x000000c0001048c0 in ?? ()</span><br><span class="line">#17 0x000000000048045a in runtime.morestack () at /root/.go/src/runtime/asm_amd64.s:621</span><br><span class="line">#18 0x47681163f543b200 in ?? ()</span><br><span class="line">#19 0x0100000000000016 in ?? ()</span><br><span class="line">#20 0x0000000000800000 in net.(*sysDialer).dialSerial (sd=0x0, ctx=..., ras=..., ~r0=..., ~r1=...) at /root/.go/src/net/dial.go:630</span><br><span class="line">#21 0x0000000000000000 in ?? ()</span><br></pre></td></tr></table></figure><p>我们能看到 <code>net.(*sysDialer).dialSerial</code> 非常显眼，这个函数通常是在使用 net.Dialer ，进行 TCP 的监听时处理的，我们根据这一个信息，对比 code diff，便能确定，这一点是我们所引入 Gin 框架，执行 TCP 监听流程时遇到问题。</p><p>我们再往下看，我们能看到 <code>getaddrinfo</code> 这个函数，这个是执行 DNS Lookup 的痕迹。我们将代码中的 <code>localhost:xx</code> 更改为 IP 地址的形式，如同我们所预料的一样，问题消失了</p><p>那么我们可以判定，这个问题是 Golang 走 CGO 调用 <code>getaddrinfo</code> 时变量导致的问题</p><p>我们可以在开源社区的 Issue 中，查到之前的 Report，参见 <a href="https://github.com/golang/go/issues/30310">https://github.com/golang/go/issues/30310</a>，解决方法是可以避免使用 glibc 提供的 DNS lookup 而使用 Go 内置实现的 DNS 来处理。</p><p>在将项目代码构建参数新增 <code>-tags &#39;netgo&#39;</code> 后，问题解决。</p><p>那么这个问题就到词结束了吗？并不是，我们的问题依然存在，到底是什么原因导致我们会出现使用 glibc 的时候有 Segment fault 的发生？</p><p>我们先把我们复现代码最小化</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;net&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    address := <span class="string">&quot;localhost:8080&quot;</span></span><br><span class="line"></span><br><span class="line">    listener, err := net.Listen(<span class="string">&quot;tcp&quot;</span>, address)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;Error creating listener:&quot;</span>, err)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">defer</span> listener.Close()</span><br><span class="line"></span><br><span class="line">    fmt.Printf(<span class="string">&quot;Listening on %s\n&quot;</span>, address)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        conn, err := listener.Accept()</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            fmt.Println(<span class="string">&quot;Error accepting connection:&quot;</span>, err)</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">go</span> handleConnection(conn)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">handleConnection</span><span class="params">(conn net.Conn)</span></span> &#123;</span><br><span class="line">    <span class="keyword">defer</span> conn.Close()</span><br><span class="line"></span><br><span class="line">    buffer := <span class="built_in">make</span>([]<span class="type">byte</span>, <span class="number">1024</span>)</span><br><span class="line">    n, err := conn.Read(buffer)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;Error reading from connection:&quot;</span>, err)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fmt.Printf(<span class="string">&quot;Received: %s\n&quot;</span>, <span class="type">string</span>(buffer[:n]))</span><br><span class="line"></span><br><span class="line">    response := <span class="string">&quot;Hello, client!&quot;</span></span><br><span class="line">    _, err = conn.Write([]<span class="type">byte</span>(response))</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;Error writing to connection:&quot;</span>, err)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们先使用，<code>CGO_ENABLED=1 go build</code> 来构建复现代码，然后发现，可以在不同环境下运行。而当我们使用 <code>CGO_ENABLED=1 go build -ldflags &quot;-linkmode=external -extldflags -static&quot;</code> 的参数构建的产物则不可以。为什么呢？我们来对比下汇编</p><p>我们能发现在第一种参数构建的代码，其 <code>getaddrinfo</code> 的部分如下</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">00000000004022a0 &lt;getaddrinfo@plt&gt;:</span><br><span class="line">  4022a0:ff 25 aa 3e 1e 00    jmp    *0x1e3eaa(%rip)        # 5e6150 &lt;getaddrinfo@GLIBC_2.2.5&gt;</span><br><span class="line">  4022a6:68 27 00 00 00       push   $0x27</span><br><span class="line">  4022ab:e9 70 fd ff ff       jmp    402020 &lt;_init+0x20&gt;</span><br></pre></td></tr></table></figure><p>哦，熟悉的 PLT 的部分，这一部分是纯动态链接，直接在加载时由链接器来处理。而第二种方式构建的的产物却不一样</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">0000000000528fd0 &lt;getaddrinfo&gt;:</span><br><span class="line">  528fd0:f3 0f 1e fa          endbr64</span><br><span class="line">  528fd4:55                   push   %rbp</span><br><span class="line">  528fd5:48 89 e5             mov    %rsp,%rbp</span><br><span class="line">  528fd8:41 57                push   %r15</span><br><span class="line">  528fda:49 89 d7             mov    %rdx,%r15</span><br><span class="line">  528fdd:41 56                push   %r14</span><br><span class="line">  528fdf:41 55                push   %r13</span><br><span class="line">  528fe1:41 54                push   %r12</span><br><span class="line">  528fe3:49 89 f4             mov    %rsi,%r12</span><br><span class="line">  528fe6:53                   push   %rbx</span><br><span class="line">  528fe7:48 81 ec 38 07 00 00 sub    $0x738,%rsp</span><br><span class="line">  528fee:48 89 bd 18 f9 ff ff mov    %rdi,-0x6e8(%rbp)</span><br><span class="line">  528ff5:48 89 8d b0 f8 ff ff mov    %rcx,-0x750(%rbp)</span><br><span class="line">  528ffc:64 48 8b 04 25 28 00 mov    %fs:0x28,%rax</span><br><span class="line">  529003:00 00 </span><br><span class="line">  529005:48 89 45 c8          mov    %rax,-0x38(%rbp)</span><br><span class="line">  529009:31 c0                xor    %eax,%eax</span><br><span class="line">  52900b:48 c7 85 30 f9 ff ff movq   $0x0,-0x6d0(%rbp)</span><br><span class="line">  529012:00 00 00 00 </span><br><span class="line">  529016:48 85 ff             test   %rdi,%rdi</span><br><span class="line">  529019:0f 84 3a 08 00 00    je     529859 &lt;getaddrinfo+0x889&gt;</span><br><span class="line">  52901f:80 3f 2a             cmpb   $0x2a,(%rdi)</span><br><span class="line">  529022:0f 84 27 08 00 00    je     52984f &lt;getaddrinfo+0x87f&gt;</span><br><span class="line">  529028:4d 85 e4             test   %r12,%r12</span><br><span class="line">  52902b:74 0b                je     529038 &lt;getaddrinfo+0x68&gt;</span><br><span class="line">  52902d:41 80 3c 24 2a       cmpb   $0x2a,(%r12)</span><br><span class="line">  529032:0f 84 7c 0b 00 00    je     529bb4 &lt;getaddrinfo+0xbe4&gt;</span><br><span class="line">  529038:4d 85 ff             test   %r15,%r15</span><br><span class="line">  52903b:0f 84 4f 08 00 00    je     529890 &lt;getaddrinfo+0x8c0&gt;</span><br><span class="line">  529041:41 8b 07             mov    (%r15),%eax</span><br><span class="line">  529044:a9 00 f8 ff ff       test   $0xfffff800,%eax</span><br><span class="line">  529049:0f 85 6d 19 00 00    jne    52a9bc &lt;getaddrinfo+0x19ec&gt;</span><br><span class="line">  52904f:48 83 bd 18 f9 ff ff cmpq   $0x0,-0x6e8(%rbp)</span><br></pre></td></tr></table></figure><p>这里省略了很多的汇编，我们可以结合 GDB 的调试来看一下关键信息</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">#0  0x00007fffb0044696 in __GI___ctype_init () at ctype-info.c:31</span><br><span class="line">#1  0x00007fffb01785d1 in __libc_early_init (initial=false) at libc_early_init.c:35</span><br><span class="line">#2  0x000000000059549f in dl_open_worker_begin ()</span><br><span class="line">#3  0x000000000054a5e8 in _dl_catch_exception ()</span><br><span class="line">#4  0x0000000000594669 in dl_open_worker ()</span><br><span class="line">#5  0x000000000054a5e8 in _dl_catch_exception ()</span><br><span class="line">#6  0x0000000000594a1b in _dl_open ()</span><br><span class="line">#7  0x000000000054a726 in do_dlopen ()</span><br><span class="line">#8  0x000000000054a5e8 in _dl_catch_exception ()</span><br><span class="line">#9  0x000000000054a6b3 in _dl_catch_error ()</span><br><span class="line">#10 0x000000000054a8a4 in __libc_dlopen_mode ()</span><br><span class="line">#11 0x0000000000538ce5 in module_load ()</span><br><span class="line">#12 0x0000000000539145 in __nss_module_get_function ()</span><br><span class="line">#13 0x000000000052aa3c in getaddrinfo ()</span><br><span class="line">#14 0x00000000004da549 in _cgo_04fbb8f65a5f_C2func_getaddrinfo (v=0xc0001acdd0) at /tmp/go-build/cgo-gcc-prolog:60</span><br><span class="line">#15 0x0000000000471204 in runtime.asmcgocall () at /root/.go/src/runtime/asm_amd64.s:923</span><br><span class="line">#16 0x000000c0001868c0 in ?? ()</span><br></pre></td></tr></table></figure><p>我们能看到第二种方式（即使用外部链接器，以静态链接方式进行链接）的背后是会用 <code>dl_open</code> 去处理 glibc 的链接</p><p>我们直接跳转到 <code>__ctype_init</code> 看下源码以及汇编，这里第一段汇编是在 Glibc 2.35 下编译产物，第二段是在 Arch Linux 下的 Glibc 2.40 下编译的产物</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span></span><br><span class="line">__ctype_init (<span class="type">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">const</span> <span class="type">uint16_t</span> **bp = __libc_tsd_address (<span class="type">const</span> <span class="type">uint16_t</span> *, CTYPE_B);</span><br><span class="line">  *bp = (<span class="type">const</span> <span class="type">uint16_t</span> *) _NL_CURRENT (LC_CTYPE, _NL_CTYPE_CLASS) + <span class="number">128</span>;</span><br><span class="line">  <span class="type">const</span> <span class="type">int32_t</span> **up = __libc_tsd_address (<span class="type">const</span> <span class="type">int32_t</span> *, CTYPE_TOUPPER);</span><br><span class="line">  *up = ((<span class="type">int32_t</span> *) _NL_CURRENT (LC_CTYPE, _NL_CTYPE_TOUPPER) + <span class="number">128</span>);</span><br><span class="line">  <span class="type">const</span> <span class="type">int32_t</span> **lp = __libc_tsd_address (<span class="type">const</span> <span class="type">int32_t</span> *, CTYPE_TOLOWER);</span><br><span class="line">  *lp = ((<span class="type">int32_t</span> *) _NL_CURRENT (LC_CTYPE, _NL_CTYPE_TOLOWER) + <span class="number">128</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">000000000055aee0 &lt;__ctype_init&gt;:</span><br><span class="line">  55aee0:f3 0f 1e fa          endbr64</span><br><span class="line">  55aee4:48 c7 c0 80 ff ff ff mov    $0xffffffffffffff80,%rax</span><br><span class="line">  55aeeb:48 c7 c1 f0 ff ff ff mov    $0xfffffffffffffff0,%rcx</span><br><span class="line">  55aef2:64 48 8b 00          mov    %fs:(%rax),%rax</span><br><span class="line">  55aef6:48 8b 00             mov    (%rax),%rax</span><br><span class="line">  55aef9:48 8b 70 40          mov    0x40(%rax),%rsi</span><br><span class="line">  55aefd:48 8d 96 00 01 00 00 lea    0x100(%rsi),%rdx</span><br><span class="line">  55af04:64 48 89 11          mov    %rdx,%fs:(%rcx)</span><br><span class="line">  55af08:48 8b 78 48          mov    0x48(%rax),%rdi</span><br><span class="line">  55af0c:48 c7 c1 e8 ff ff ff mov    $0xffffffffffffffe8,%rcx</span><br><span class="line">  55af13:48 8d 97 00 02 00 00 lea    0x200(%rdi),%rdx</span><br><span class="line">  55af1a:64 48 89 11          mov    %rdx,%fs:(%rcx)</span><br><span class="line">  55af1e:48 8b 40 58          mov    0x58(%rax),%rax</span><br><span class="line">  55af22:48 c7 c2 e0 ff ff ff mov    $0xffffffffffffffe0,%rdx</span><br><span class="line">  55af29:48 05 00 02 00 00    add    $0x200,%rax</span><br><span class="line">  55af2f:64 48 89 02          mov    %rax,%fs:(%rdx)</span><br><span class="line">  55af33:c3                   ret</span><br><span class="line">  55af34:66 2e 0f 1f 84 00 00 cs nopw 0x0(%rax,%rax,1)</span><br><span class="line">  55af3b:00 00 00 </span><br><span class="line">  55af3e:66 90                xchg   %ax,%ax</span><br></pre></td></tr></table></figure><p>第二段</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">000000000111c270 &lt;__ctype_init&gt;:</span><br><span class="line"> 111c270:f3 0f 1e fa          endbr64</span><br><span class="line"> 111c274:48 c7 c0 90 ff ff ff mov    $0xffffffffffffff90,%rax</span><br><span class="line"> 111c27b:48 c7 c1 e8 ff ff ff mov    $0xffffffffffffffe8,%rcx</span><br><span class="line"> 111c282:64 48 8b 00          mov    %fs:(%rax),%rax</span><br><span class="line"> 111c286:48 8b 00             mov    (%rax),%rax</span><br><span class="line"> 111c289:48 8b 70 38          mov    0x38(%rax),%rsi</span><br><span class="line"> 111c28d:48 8d 96 00 01 00 00 lea    0x100(%rsi),%rdx</span><br><span class="line"> 111c294:64 48 89 11          mov    %rdx,%fs:(%rcx)</span><br><span class="line"> 111c298:48 8b 78 40          mov    0x40(%rax),%rdi</span><br><span class="line"> 111c29c:48 c7 c1 e0 ff ff ff mov    $0xffffffffffffffe0,%rcx</span><br><span class="line"> 111c2a3:48 8d 97 00 02 00 00 lea    0x200(%rdi),%rdx</span><br><span class="line"> 111c2aa:64 48 89 11          mov    %rdx,%fs:(%rcx)</span><br><span class="line"> 111c2ae:48 8b 40 50          mov    0x50(%rax),%rax</span><br><span class="line"> 111c2b2:48 c7 c2 d8 ff ff ff mov    $0xffffffffffffffd8,%rdx</span><br><span class="line"> 111c2b9:48 05 00 02 00 00    add    $0x200,%rax</span><br><span class="line"> 111c2bf:64 48 89 02          mov    %rax,%fs:(%rdx)</span><br><span class="line"> 111c2c3:c3                   ret</span><br><span class="line"> 111c2c4:66 2e 0f 1f 84 00 00 cs nopw 0x0(%rax,%rax,1)</span><br><span class="line"> 111c2cb:00 00 00 </span><br><span class="line"> 111c2ce:66 90                xchg   %ax,%ax</span><br></pre></td></tr></table></figure><p>我们能看到两段代码行为基本一致，但是 offset 存在明显差异。这个时候我们对比一下 Glibc 两个版本的代码的差异</p><p>我们能发现，由于 <code>__locale_data</code> 结构的变化，导致 <code>_NL_CTYPE_CLASS</code> 的 offset 在不同版本下存在偏移</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//v2.35</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> __<span class="title">locale_data</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *name;</span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *filedata;<span class="comment">/* Region mapping the file data.  */</span></span><br><span class="line">  <span class="type">off_t</span> filesize;<span class="comment">/* Size of the file (and the region).  */</span></span><br><span class="line">  <span class="class"><span class="keyword">enum</span>/* <span class="title">Flavor</span> <span class="title">of</span> <span class="title">storage</span> <span class="title">used</span> <span class="title">for</span> <span class="title">those</span>.  */</span></span><br><span class="line"><span class="class">  &#123;</span></span><br><span class="line">    ld_malloced,<span class="comment">/* Both are malloc&#x27;d.  */</span></span><br><span class="line">    ld_mapped,<span class="comment">/* name is malloc&#x27;d, filedata mmap&#x27;d */</span></span><br><span class="line">    ld_archive<span class="comment">/* Both point into mmap&#x27;d archive regions.  */</span></span><br><span class="line">  &#125; alloc;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* This provides a slot for category-specific code to cache data computed</span></span><br><span class="line"><span class="comment">     about this locale.  That code can set a cleanup function to deallocate</span></span><br><span class="line"><span class="comment">     the data.  */</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">  &#123;</span></span><br><span class="line">    <span class="type">void</span> (*cleanup) (<span class="keyword">struct</span> __locale_data *);</span><br><span class="line">    <span class="class"><span class="keyword">union</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">      <span class="type">void</span> *data;</span><br><span class="line">      <span class="class"><span class="keyword">struct</span> <span class="title">lc_time_data</span> *<span class="title">time</span>;</span></span><br><span class="line">      <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">gconv_fcts</span> *<span class="title">ctype</span>;</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125; private;</span><br><span class="line"></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> usage_count;<span class="comment">/* Counter for users.  */</span></span><br><span class="line"></span><br><span class="line">  <span class="type">int</span> use_translit;<span class="comment">/* Nonzero if the mb*towv*() and wc*tomb()</span></span><br><span class="line"><span class="comment">   functions should use transliteration.  */</span></span><br><span class="line"></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> nstrings;<span class="comment">/* Number of strings below.  */</span></span><br><span class="line">  <span class="class"><span class="keyword">union</span> <span class="title">locale_data_value</span></span></span><br><span class="line"><span class="class">  &#123;</span></span><br><span class="line">    <span class="type">const</span> <span class="type">uint32_t</span> *wstr;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> *<span class="built_in">string</span>;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> word;<span class="comment">/* Note endian issues vs 64-bit pointers.  */</span></span><br><span class="line">  &#125;</span><br><span class="line">  values __flexarr;<span class="comment">/* Items, usually pointers into `filedata&#x27;.  */</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//v2.40</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> __<span class="title">locale_data</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *name;</span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *filedata;<span class="comment">/* Region mapping the file data.  */</span></span><br><span class="line">  <span class="type">off_t</span> filesize;<span class="comment">/* Size of the file (and the region).  */</span></span><br><span class="line">  <span class="class"><span class="keyword">enum</span>/* <span class="title">Flavor</span> <span class="title">of</span> <span class="title">storage</span> <span class="title">used</span> <span class="title">for</span> <span class="title">those</span>.  */</span></span><br><span class="line"><span class="class">  &#123;</span></span><br><span class="line">    ld_malloced,<span class="comment">/* Both are malloc&#x27;d.  */</span></span><br><span class="line">    ld_mapped,<span class="comment">/* name is malloc&#x27;d, filedata mmap&#x27;d */</span></span><br><span class="line">    ld_archive<span class="comment">/* Both point into mmap&#x27;d archive regions.  */</span></span><br><span class="line">  &#125; alloc;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* This provides a slot for category-specific code to cache data</span></span><br><span class="line"><span class="comment">     computed about this locale.  Type of the data pointed to:</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     LC_CTYPE   struct lc_ctype_data (_nl_intern_locale_data)</span></span><br><span class="line"><span class="comment">     LC_TIME    struct lc_time_data (_nl_init_alt_digit, _nl_init_era_entries)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     This data deallocated at the start of _nl_unload_locale.  */</span></span><br><span class="line">  <span class="type">void</span> *private;</span><br><span class="line"></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> usage_count;<span class="comment">/* Counter for users.  */</span></span><br><span class="line"></span><br><span class="line">  <span class="type">int</span> use_translit;<span class="comment">/* Nonzero if the mb*towv*() and wc*tomb()</span></span><br><span class="line"><span class="comment">   functions should use transliteration.  */</span></span><br><span class="line"></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> nstrings;<span class="comment">/* Number of strings below.  */</span></span><br><span class="line">  <span class="class"><span class="keyword">union</span> <span class="title">locale_data_value</span></span></span><br><span class="line"><span class="class">  &#123;</span></span><br><span class="line">    <span class="type">const</span> <span class="type">uint32_t</span> *wstr;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> *<span class="built_in">string</span>;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> word;<span class="comment">/* Note endian issues vs 64-bit pointers.  */</span></span><br><span class="line">  &#125;</span><br><span class="line">  values __flexarr;<span class="comment">/* Items, usually pointers into `filedata&#x27;.  */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>那么我们问题的 Root cause 也就得到了确定，整个问题的因果链如下</p><ol><li>我们项目使用引入 Gin，来作为 HTTP Server</li><li>我们使用 localhost 来作为默认的监听地址</li><li>localhost 在服务端启动监听的时候触发了 DNS Lookup 行为</li><li>CGO_ENABLED=1 的情况下，Golang 默认使用 glibc 中的 <code>getaddrinfo</code> 进行 DNS lookup</li><li>我们项目开启了 <code>-ldflags &quot;-linkmode=external -extldflags -static&quot;</code>，即使用外部链接器，以静态链接方式进行链接），将会使用 <code>dl_open</code> 来处理 glibc，而且这种情况下，<code>__ctype_init</code> 这类方法将会被静态编译至二进制中</li><li>Glibc 中特定字段不同版本的 offset 不一致</li><li>结合 4&amp;5&amp;6, 我们在 Glibc 2.35 （即文中默认的构建机）静态编译后的产物，因为 offset 不一致，在 Glibc 2.40 （即 Arch Linux）下使用时，会出现 segment fault</li></ol><p>问题得证</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这个问题变更只有一行，但是查了我很久的时间，反复在 Go 和 Glibc 的源码中横跳。顺便还去复习了 Linker 的很多知识</p><p>这某种意义上是我很喜欢这个行业的原因，因为我们所遇到的每个问题背后的风景，都很值得一看。</p>